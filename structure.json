{
  "public": {
    "js": {
      "calculo.js": "export function calcularGanancia() {\r\n  let gasto = 0; // Reiniciamos el gasto\r\n\r\n  // Obtener la cantidad de objetos a fabricar\r\n  const cantidadFabricarInput = document.getElementById(\"cantidadFabricar\");\r\n  const cantidadFabricar = cantidadFabricarInput ? parseInt(cantidadFabricarInput.value) || 1 : 1;\r\n\r\n  console.log(`[DEBUG] Cantidad a fabricar: ${cantidadFabricar}`);\r\n\r\n  // Obtener los ingredientes desde el dataset\r\n  const ingredientesElement = document.getElementById(\"ingredientes\");\r\n  if (!ingredientesElement || !ingredientesElement.dataset.ingredientes) {\r\n    console.warn(\"[WARNING] No se encontraron ingredientes en el dataset.\");\r\n    return;\r\n  }\r\n\r\n  const ingredientes = JSON.parse(ingredientesElement.dataset.ingredientes || \"[]\");\r\n  console.log(\"[DEBUG] Ingredientes cargados:\", ingredientes);\r\n\r\n  let ingredientesTotalesHTML = \"\";\r\n\r\n  ingredientes.forEach(ingrediente => {\r\n    const inputPrecio = document.getElementById(`precio-${ingrediente.id}`);\r\n    \r\n    if (!inputPrecio) {\r\n      console.warn(`[WARNING] No se encontrÃ³ el input para el ingrediente: ${ingrediente.name}`);\r\n      return;\r\n    }\r\n\r\n    // Obtener el precio unitario ingresado por el usuario\r\n    const precioUnitario = parseFloat(inputPrecio.value) || 0;\r\n    console.log(`[DEBUG] Precio de ${ingrediente.name}: ${precioUnitario} K`);\r\n\r\n    // ðŸ”¥ Calcular el costo total del ingrediente (precio unitario * cantidad requerida)\r\n    const costoIngrediente = precioUnitario * ingrediente.quantity;\r\n    gasto += costoIngrediente; // Sumar al gasto total de la receta\r\n\r\n    // Calcular cantidad total de ingredientes requeridos segÃºn la cantidad a fabricar\r\n    const cantidadTotal = ingrediente.quantity * cantidadFabricar;\r\n    ingredientesTotalesHTML += `\r\n      <li>\r\n        <img src=\"${ingrediente.image}\" alt=\"${ingrediente.name}\" style=\"width: 40px; height: 40px; vertical-align: middle;\" />\r\n        ${ingrediente.name}: <strong>${cantidadTotal}</strong> unidades\r\n      </li>\r\n    `;\r\n  });\r\n\r\n  // ðŸ”¥ Calcular el Gasto Total multiplicando el gasto base por la cantidad a fabricar\r\n  const gastoTotal = gasto * cantidadFabricar;\r\n\r\n  // Verificar si el input del precio del objeto existe antes de obtener su valor\r\n  const precioObjetoInput = document.getElementById(\"precioObjeto\");\r\n  const precioObjeto = precioObjetoInput ? parseFloat(precioObjetoInput.value) || 0 : 0;\r\n\r\n  console.log(\"[DEBUG] Precio del objeto:\", precioObjeto);\r\n\r\n  // Calcular la ganancia correctamente\r\n  const ganancia = precioObjeto - gasto;\r\n  const gananciaTotal = ganancia * cantidadFabricar;\r\n\r\n  // âœ… Actualizar el Gasto en la secciÃ³n verde\r\n  const gastoElement = document.getElementById(\"gasto\");\r\n  if (gastoElement) gastoElement.textContent = `${gasto} K`; // ðŸ”¥ Ahora el gasto aparece correctamente en verde\r\n\r\n  // âœ… Actualizar la Ganancia en la secciÃ³n verde\r\n  const gananciaElement = document.getElementById(\"ganancia\");\r\n  if (gananciaElement) gananciaElement.textContent = `${ganancia} K`;\r\n\r\n  // âœ… Actualizar la Ganancia Total en la secciÃ³n azul\r\n  const gananciaTotalElement = document.getElementById(\"gananciaTotal\");\r\n  if (gananciaTotalElement) gananciaTotalElement.textContent = `${gananciaTotal} K`;\r\n\r\n  // âœ… Restaurar la actualizaciÃ³n de \"Gasto Total\" en la secciÃ³n azul\r\n  const gastoTotalElement = document.getElementById(\"gastoTotal\");\r\n  if (gastoTotalElement) gastoTotalElement.textContent = `Gasto Total: ${gastoTotal} K`;\r\n\r\n  // Actualizar la lista de ingredientes totales necesarios\r\n  const ingredientesTotalesElement = document.getElementById(\"ingredientesTotales\");\r\n  if (ingredientesTotalesElement) ingredientesTotalesElement.innerHTML = ingredientesTotalesHTML;\r\n\r\n  console.log(\"[DEBUG] CÃ¡lculo completado:\");\r\n  console.log(` - Gasto: ${gasto} K`);\r\n  console.log(` - Gasto Total: ${gastoTotal} K`);\r\n  console.log(` - Ganancia: ${ganancia} K`);\r\n  console.log(` - Ganancia Total: ${gananciaTotal} K`);\r\n}\r\n\r\n// Asegurar que la funciÃ³n sea accesible globalmente\r\nwindow.calcularGanancia = calcularGanancia;",
      "render.js": "import { calcularGanancia } from './calculo.js';\r\n\r\n// FunciÃ³n para renderizar listas de efectos\r\nexport const renderEffects = (effects) => {\r\n  if (!effects || effects.length === 0) {\r\n    return \"<li>Sin efectos disponibles</li>\";\r\n  }\r\n  return effects\r\n    .map(\r\n      (effect) =>\r\n        `<li>${effect.characteristic || \"Efecto desconocido\"}: ${effect.from || 0} a ${effect.to || 0}</li>`\r\n    )\r\n    .join(\"\");\r\n};\r\n\r\n// FunciÃ³n para renderizar la receta en el frontend con inputs de precios\r\nexport const renderRecipe = (recipe) => {\r\n  if (!recipe || recipe.length === 0) {\r\n    return \"<li>Receta no disponible</li>\";\r\n  }\r\n\r\n  return recipe.map(ingredient => {\r\n    const inputId = `precio-${ingredient.id}`;\r\n    return `\r\n      <li>\r\n        <img src=\"${ingredient.image}\" alt=\"${ingredient.name}\" style=\"width: 40px; height: 40px; vertical-align: middle;\" />\r\n        ${ingredient.name} (Cantidad: ${ingredient.quantity || \"N/A\"})\r\n        <input type=\"number\" class=\"price-input\" id=\"${inputId}\" placeholder=\"Precio por unidad\">\r\n      </li>\r\n    `;\r\n  }).join(\"\");\r\n};\r\n\r\n// âœ… FunciÃ³n mejorada para asignar eventos de cÃ¡lculo a los inputs despuÃ©s de renderizar la receta\r\nexport function asignarEventosCalculo() {\r\n  document.querySelectorAll(\".price-input\").forEach(input => {\r\n    input.removeEventListener(\"input\", calcularGanancia); // ðŸ”¥ Evita eventos duplicados\r\n    input.addEventListener(\"input\", () => {\r\n      console.log(`[DEBUG] Evento disparado en: ${input.id}`);\r\n      calcularGanancia();\r\n    });\r\n  });\r\n}\r\n"
    }
  }
}