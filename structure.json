{
  "public": {
    "js": {
      "blog.js": "// public/js/blog.js  \ndocument.addEventListener('DOMContentLoaded', () => {  \n  const contenedorPosts = document.getElementById('contenedor-posts');  \n  const ordenarPorSelect = document.getElementById('ordenarPor');  \n  const filtroValorInput = document.getElementById('filtroValor');  \n  const aplicarFiltrosBtn = document.getElementById('aplicarFiltros');  \n  const formComentario = document.getElementById('formComentario');  \n  const comentariosModal = new bootstrap.Modal(document.getElementById('comentariosModal'));  \n    \n  // Cargar posts al iniciar  \n  cargarPosts();  \n    \n  // Evento para aplicar filtros  \n  aplicarFiltrosBtn.addEventListener('click', cargarPosts);  \n    \n  // Evento para enviar comentario  \n  formComentario.addEventListener('submit', enviarComentario);  \n    \n  async function cargarPosts() {  \n    try {  \n      const ordenarPor = ordenarPorSelect.value;  \n      const filtroValor = filtroValorInput.value;  \n        \n      const url = `/api/posts?ordenarPor=${ordenarPor}&filtroValor=${filtroValor}`;  \n      const res = await fetch(url);  \n      const data = await res.json();  \n        \n      if (!data.success) {  \n        throw new Error(data.error || 'Error al cargar los posts');  \n      }  \n        \n      renderizarPosts(data.data);  \n    } catch (error) {  \n      console.error('Error:', error);  \n      contenedorPosts.innerHTML = `<div class=\"col-12 text-center text-danger\">  \n        <p>Error al cargar los posts. Por favor, intenta de nuevo m√°s tarde.</p>  \n      </div>`;  \n    }  \n  }  \n    \n  function renderizarPosts(posts) {  \n  if (!posts || posts.length === 0) {  \n    contenedorPosts.innerHTML = `<div class=\"col-12 text-center\">  \n      <p>No hay posts disponibles con los filtros actuales.</p>  \n    </div>`;  \n    return;  \n  }  \n  \n  contenedorPosts.innerHTML = '';  \n  \n  posts.forEach(post => {  \n    const fechaActualizacion = new Date(post.fechaActualizacion);  \n    const tiempoTranscurrido = obtenerTiempoTranscurrido(fechaActualizacion);  \n  \n    const card = document.createElement('div');  \n    card.className = 'col-md-3 mb-4';  \n  \n    card.innerHTML = `\n      <div class=\"card h-100 shadow-sm\">\n        <img src=\"${post.imagen || 'images/default-item.png'}\" class=\"card-img-top\" alt=\"${post.nombre}\">\n        <div class=\"card-body text-center\">\n          <h5 class=\"card-title\">${post.nombre}</h5>\n          <p class=\"text-muted small\">${tiempoTranscurrido}</p>\n          <p class=\"text-primary fw-bold\">Gasto: ${post.gasto || 0} kamas</p> <!-- üëà A√ëADIMOS GASTO -->\n          <p class=\"text-success fw-bold\">Valor: ${post.valor} kamas</p>\n          ${post.ganancia !== undefined ? `\n          <p class=\"fw-bold\" style=\"color: ${post.ganancia >= 0 ? 'green' : 'red'}\">\n            ${post.ganancia >= 0 ? 'Ganancia' : 'P√©rdida'}: ${Math.abs(post.ganancia)} kamas\n          </p>\n          ` : ''}\n          <div class=\"d-flex justify-content-center gap-2 mt-3\">\n            <button class=\"btn btn-sm btn-outline-primary like-btn\" data-id=\"${post._id}\">\n              <i class=\"fas fa-thumbs-up\"></i> ${post.likes || 0}\n            </button>\n            <button class=\"btn btn-sm btn-outline-secondary comentario-btn\" data-id=\"${post._id}\">\n              <i class=\"fas fa-comments\"></i> Comentarios\n            </button>\n          </div>\n        </div>\n      </div>\n    `;  \n  \n    contenedorPosts.appendChild(card);  \n  });  \n  \n  // Asignar eventos a los nuevos botones  \n  document.querySelectorAll('.like-btn').forEach(btn => {\n    btn.addEventListener('click', manejarLike);\n  });\n\n  document.querySelectorAll('.comentario-btn').forEach(btn => {\n    btn.addEventListener('click', mostrarComentarios);\n  });\n}\n\n\n  function obtenerTiempoTranscurrido(fecha) {\n    const ahora = new Date();\n    const segundos = Math.floor((ahora - fecha) / 1000);\n\n    const minutos = Math.floor(segundos / 60);\n    const horas = Math.floor(minutos / 60);\n    const dias = Math.floor(horas / 24);\n\n    if (dias > 0) return `Actualizado hace ${dias} d√≠a(s)`;\n    if (horas > 0) return `Actualizado hace ${horas} hora(s)`;\n    if (minutos > 0) return `Actualizado hace ${minutos} minuto(s)`;\n    return `Actualizado hace unos segundos`;\n  }\n\n  // Funci√≥n de ejemplo para enviar comentarios\n  async function enviarComentario(e) {\n    e.preventDefault();\n    console.log('Comentario enviado (completa esta funci√≥n)');\n  }\n\n  // Funci√≥n de ejemplo para manejar likes\n  function manejarLike(e) {\n    const idPost = e.currentTarget.dataset.id;\n    console.log(`Like al post ${idPost} (completa esta funci√≥n)`);\n  }\n\n  // Funci√≥n de ejemplo para mostrar comentarios\n  function mostrarComentarios(e) {\n    const idPost = e.currentTarget.dataset.id;\n    console.log(`Mostrar comentarios del post ${idPost} (completa esta funci√≥n)`);\n    comentariosModal.show();\n  }\n});\n",
      "search.js": "import { renderRecipe, asignarEventosCalculo } from './render.js';\r\nimport { calcularGanancia } from './calculo.js';\r\nlet imagenBuscada = \"\";\r\nconst form = document.getElementById('searchForm');\r\nconst recipeSummary = document.getElementById('recipeSummary');\r\nconst calculationDetails = document.getElementById('calculationDetails');\r\nconst ingredientesList = document.getElementById('ingredientes');\r\nconst ingredientesTotalesList = document.getElementById('ingredientesTotales');\r\n\r\n// Agregamos un evento para manejar el env√≠o del formulario\r\nform.addEventListener(\"submit\", async (e) => {\r\n  e.preventDefault();\r\n\r\n  const objectNameRaw = document.getElementById(\"objectName\").value.trim();\r\n  const objectName = objectNameRaw.normalize(\"NFC\");\r\n\r\n  console.log(\"[DEBUG] Nombre del objeto enviado:\", objectName);\r\n\r\n  if (!objectName) {\r\n    recipeSummary.innerHTML =\r\n      '<p style=\"color: red;\">Por favor, ingresa el nombre de un objeto.</p>';\r\n    calculationDetails.innerHTML = \"\";\r\n    return;\r\n  }\r\n\r\n  try {\r\n    recipeSummary.innerHTML = \"<p>Buscando...</p>\";\r\n    calculationDetails.innerHTML = \"\";\r\n\r\n    const response = await fetch(\"/api/recipes/search\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ objectName }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error HTTP: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.success && data.data) {\r\n      const item = data.data;\r\n      imagenBuscada = item.image || item.img || \"/default-image.png\";\r\n      console.log(\"[DEBUG] Datos recibidos del servidor:\", data);\r\n      console.log(\"[DEBUG] Datos recibidos del servidor:\", item);\r\n\r\n      recipeSummary.innerHTML = `\r\n        <h2 id=\"nombreObjeto\">${item.name || \"Nombre no disponible\"}</h2>\r\n        \r\n        <h3>Precio de Venta:</h3>\r\n        <input type=\"number\" id=\"precioObjeto\" class=\"price-input\" placeholder=\"Ingrese precio\">\r\n\r\n        <h3>Receta:</h3>\r\n        <ul id=\"ingredientes\">${renderRecipe(item.recipe)}</ul>\r\n\r\n        <h3>Gasto: <span id=\"gasto\">0</span> K</h3>\r\n        <h3>Ganancia: <span id=\"ganancia\">0</span> K</h3>\r\n      `;\r\n\r\n      calculationDetails.innerHTML = `\r\n        <label>Cantidad a fabricar:\r\n          <input type=\"number\" id=\"cantidadFabricar\" value=\"1\" min=\"1\" class=\"price-input\">\r\n        </label>\r\n\r\n        <h3>Ganancia Total: <span id=\"gananciaTotal\">0</span> K</h3>\r\n\r\n        <h3>Ingredientes Totales Necesarios:</h3>\r\n        <ul id=\"ingredientesTotales\"></ul>\r\n      `;\r\n\r\n      document.getElementById(\"ingredientes\").dataset.ingredientes = JSON.stringify(item.recipe);\r\n      asignarEventosCalculo();\r\n\r\n    } else {\r\n      recipeSummary.innerHTML = \"<p>No se encontraron resultados para tu b√∫squeda.</p>\";\r\n      calculationDetails.innerHTML = \"\";\r\n      console.log(\"[DEBUG] Respuesta sin datos:\", data);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"[ERROR] Error en la b√∫squeda:\", error);\r\n    recipeSummary.innerHTML =\r\n      '<p style=\"color: red;\">Hubo un error al realizar la b√∫squeda. Int√©ntalo de nuevo m√°s tarde.</p>';\r\n    calculationDetails.innerHTML = \"\";\r\n  }\r\n});\r\n\r\nfunction sincronizarConBlog() {\r\n  const nombre = document.getElementById(\"nombreObjeto\")?.textContent;\r\n  const descripcion = \"\";\r\n  const imagen = imagenBuscada || \"/default-image.png\";\r\n  const id = window.item?.id || null;\r\n  const slug = window.item?.slug || null;\r\n\r\n  const valor = parseInt(document.getElementById(\"precioObjeto\")?.value || \"0\");\r\n  const gasto = parseInt(document.getElementById(\"gasto\")?.textContent || \"0\");\r\n  const ganancia = parseInt(document.getElementById(\"ganancia\")?.textContent || \"0\");\r\n  const listaIngredientes = JSON.parse(document.getElementById(\"ingredientes\")?.dataset.ingredientes || \"[]\");\r\n  const ingredientes = listaIngredientes.map(ing => ing.name);\r\n\r\n  if (!nombre || valor === 0 || isNaN(valor)) {\r\n    console.warn(\"[BLOG] No se sincroniz√≥ porque falta el nombre o el valor es inv√°lido\");\r\n    return;\r\n  }\r\n\r\n  // üî• Enviar tambi√©n gasto y ganancia al backend\r\n  fetch(\"/api/posts/updateOrCreate\", {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({\r\n      id,\r\n      slug,\r\n      nombre,\r\n      descripcion,\r\n      imagen,\r\n      valor,\r\n      gasto,       // üëà Nuevo campo gasto\r\n      ganancia,    // üëà Nuevo campo ganancia\r\n      ingredientes\r\n    })\r\n  })\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      if (data.success) {\r\n        console.log(\"[BLOG] Objeto sincronizado correctamente con el blog:\", data.mensaje);\r\n      } else {\r\n        console.warn(\"[BLOG] Error al sincronizar:\", data.error);\r\n      }\r\n    })\r\n    .catch(err => console.error(\"[BLOG] Error de red al sincronizar:\", err));\r\n}\r\n\r\nwindow.sincronizarConBlog = sincronizarConBlog;\r\n"
    }
  },
  "src": {
    "routes": {
      "blogRoutes.js": "// src/routes/blogRoutes.js  \nconst express = require('express');  \nconst router = express.Router();  \nconst BlogPost = require('../models/BlogPost');  \nconst verificarToken = require('../middlewares/authMiddleware');  \n  \n// Obtener todos los posts (con filtros opcionales)  \nrouter.get('/posts', async (req, res) => {  \n  try {  \n    const { ordenarPor, filtroValor } = req.query;  \n    let query = {};  \n    let sort = {};  \n      \n    // Aplicar filtro por valor m√≠nimo si se especifica  \n    if (filtroValor) {  \n      query.valor = { $gte: parseInt(filtroValor) };  \n    }  \n      \n    // Aplicar ordenamiento  \n    if (ordenarPor === 'valor') {  \n      sort.valor = -1; // Descendente por valor  \n    } else if (ordenarPor === 'reciente') {  \n      sort.fechaActualizacion = -1; // Descendente por fecha de actualizaci√≥n  \n    } else {  \n      sort.fechaCreacion = -1; // Por defecto, los m√°s nuevos primero  \n    }  \n      \n    const posts = await BlogPost.find(query)  \n      .sort(sort)  \n      .populate('usuariosLike', 'username')  \n      .populate('comentarios.usuario', 'username');  \n        \n    res.json({ success: true, data: posts });  \n  } catch (error) {  \n    console.error('Error al obtener posts:', error);  \n    res.status(500).json({ success: false, error: 'Error al obtener los posts' });  \n  }  \n});  \n  \n// Crear nuevo post (requiere autenticaci√≥n)  \nrouter.post('/posts', verificarToken, async (req, res) => {  \n  try {  \n    const { nombre, descripcion, imagen, valor, ingredientes } = req.body;  \n      \n    const newPost = new BlogPost({  \n      nombre,  \n      descripcion,  \n      imagen,  \n      valor,  \n      ingredientes  \n    });  \n      \n    await newPost.save();  \n    res.status(201).json({ success: true, data: newPost });  \n  } catch (error) {  \n    console.error('Error al crear post:', error);  \n    res.status(500).json({ success: false, error: 'Error al crear el post' });  \n  }  \n});  \n  \n// Dar like a un post  \nrouter.post('/posts/:id/like', verificarToken, async (req, res) => {  \n  try {  \n    const post = await BlogPost.findById(req.params.id);  \n    if (!post) {  \n      return res.status(404).json({ success: false, error: 'Post no encontrado' });  \n    }  \n      \n    // Verificar si el usuario ya dio like  \n    const userIndex = post.usuariosLike.indexOf(req.user.id);  \n      \n    if (userIndex === -1) {  \n      // A√±adir like  \n      post.likes += 1;  \n      post.usuariosLike.push(req.user.id);  \n    } else {  \n      // Quitar like  \n      post.likes -= 1;  \n      post.usuariosLike.splice(userIndex, 1);  \n    }  \n      \n    await post.save();  \n    res.json({ success: true, data: post });  \n  } catch (error) {  \n    console.error('Error al procesar like:', error);  \n    res.status(500).json({ success: false, error: 'Error al procesar el like' });  \n  }  \n});  \n  \n// A√±adir comentario  \nrouter.post('/posts/:id/comentario', verificarToken, async (req, res) => {  \n  try {  \n    const { texto } = req.body;  \n      \n    if (!texto) {  \n      return res.status(400).json({ success: false, error: 'El comentario no puede estar vac√≠o' });  \n    }  \n      \n    const post = await BlogPost.findById(req.params.id);  \n    if (!post) {  \n      return res.status(404).json({ success: false, error: 'Post no encontrado' });  \n    }  \n      \n    post.comentarios.push({  \n      usuario: req.user.id,  \n      texto  \n    });  \n      \n    await post.save();  \n      \n    // Obtener el post actualizado con los datos de usuario en comentarios  \n    const updatedPost = await BlogPost.findById(req.params.id)  \n      .populate('comentarios.usuario', 'username');  \n        \n    res.json({ success: true, data: updatedPost });  \n  } catch (error) {  \n    console.error('Error al a√±adir comentario:', error);  \n    res.status(500).json({ success: false, error: 'Error al a√±adir el comentario' });  \n  }  \n});  \n  \n// Crear o actualizar autom√°ticamente un post desde el buscador (sin autenticaci√≥n)\nrrouter.post('/posts/updateOrCreate', async (req, res) => {\n  try {\n    console.log('[DEBUG] Petici√≥n recibida en updateOrCreate:', req.body);\n    const { nombre, descripcion, imagen, valor, gasto, ganancia, ingredientes } = req.body; // üëà A√ëADIDOS gasto y ganancia\n\n    if (!nombre || !valor) {\n      return res.status(400).json({ success: false, error: 'Faltan campos requeridos' });\n    }\n\n    // üî• Siempre eliminar versiones anteriores del objeto antes de crear uno nuevo\n    const eliminados = await BlogPost.deleteMany({ nombre });\n    console.log(`[INFO] Se eliminaron ${eliminados.deletedCount} versiones anteriores de \"${nombre}\"`);\n\n    const nuevoPost = new BlogPost({\n      nombre,\n      descripcion,\n      imagen: imagen,\n      valor,\n      gasto,      // üëà A√ëADIDO gasto\n      ganancia,   // üëà A√ëADIDO ganancia\n      ingredientes,\n      fechaCreacion: new Date(),\n      fechaActualizacion: new Date()\n    });\n\n    await nuevoPost.save();\n    return res.status(201).json({ success: true, mensaje: 'Versi√≥n actualizada del objeto agregada al blog' });\n\n  } catch (error) {\n    console.error('Error en updateOrCreate:', error);\n    return res.status(500).json({ success: false, error: 'Error interno del servidor' });\n  }\n});\n\nmodule.exports = router;"
    }
  }
}