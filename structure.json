{
  "public": {
    "index.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <!-- Bootstrap CSS -->\r\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>B√∫squeda de Recetas - DofusDB</title>\r\n\r\n  <!-- SEO B√°sico -->\r\n  <meta name=\"description\" content=\"Buscador de recetas de objetos de Dofus. Calcula tus ganancias de forma r√°pida y sencilla.\">\r\n  <meta name=\"keywords\" content=\"Dofus, recetas, objetos, kamas, b√∫squeda, econom√≠a, alquimia, herrero, crudo, oficio\">\r\n  <meta name=\"robots\" content=\"index, follow\">\r\n  <meta name=\"author\" content=\"Jorge Fern√°ndez Rojo Andr√©s\">\r\n  <link rel=\"canonical\" href=\"https://recetasdofus.com.ar\">\r\n\r\n  <!-- Open Graph -->\r\n  <meta property=\"og:title\" content=\"B√∫squeda de Recetas - DofusDB\">\r\n  <meta property=\"og:description\" content=\"Calcul√° cu√°nto gan√°s al fabricar objetos en Dofus.\">\r\n  <meta property=\"og:image\" content=\"https://recetasdofus.com.ar/images/favicon.png\">\r\n  <meta property=\"og:url\" content=\"https://recetasdofus.com.ar\">\r\n  <meta property=\"og:type\" content=\"website\">\r\n\r\n  <link rel=\"stylesheet\" href=\"css/style.css\">\r\n  <link rel=\"icon\" href=\"images/favicon.png\" type=\"image/png\">\r\n\r\n  <!-- Google tag (gtag.js) -->\r\n  <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8948109105283119\" crossorigin=\"anonymous\"></script>\r\n  <script async src=\"https://www.googletagmanager.com/gtag/js?id=G-GHSB8ZF8WD\"></script>\r\n  <script>\r\n    window.dataLayer = window.dataLayer || [];\r\n    function gtag(){dataLayer.push(arguments);}\r\n    gtag('js', new Date());\r\n    gtag('config', 'G-GHSB8ZF8WD');\r\n  </script>\r\n</head>\r\n\r\n<body>\r\n<!-- Botones para NO logueados -->\r\n<button id=\"btnRedirectLogin\" hidden>Iniciar Sesi√≥n</button>\r\n<button id=\"btnRedirectRegister\" hidden>Registrarse</button>\r\n\r\n<!-- Botones para logueados -->\r\n<button id=\"btnUltimasRecetas\" hidden>√öltimas Recetas</button>\r\n<button id=\"btnVolversePremium\" hidden>Volverse Premium</button>\r\n<button id=\"btnBeneficios\" hidden>Ver Beneficios Premium</button>\r\n<button id=\"btnLogout\" hidden>Cerrar Sesi√≥n</button>\r\n\r\n<!-- Nueva secci√≥n introductoria con estilo de cartel blanco -->\r\n<section class=\"container mt-5 d-flex justify-content-center\">\r\n  <div class=\"p-4 bg-white rounded shadow\" style=\"max-width: 600px;\">\r\n    <h2 class=\"text-center\">¬øQu√© es Recetas Dofus?</h2>\r\n    <p class=\"mt-3\">\r\n      Recetas Dofus es una herramienta gratuita pensada para los jugadores de Dofus que desean maximizar sus ganancias dentro del juego. \r\n      Aqu√≠ podr√°s buscar recetas de objetos, calcular tus costos de fabricaci√≥n y estimar tus ganancias de forma r√°pida y sencilla. \r\n      Nuestro objetivo es brindarte una soluci√≥n √°gil y confiable para que optimices tu tiempo y recursos en el juego.\r\n    </p>\r\n  </div>\r\n</section>\r\n\r\n<h1 class=\"text-center mt-4\">B√∫squeda de Recetas en DofusDB</h1>\r\n\r\n<!-- Formulario de b√∫squeda -->\r\n<form id=\"searchForm\" class=\"text-center mt-3\">\r\n  <label for=\"objectName\">Nombre del objeto:</label>\r\n  <input type=\"text\" id=\"objectName\" placeholder=\"Buscar receta\" required>\r\n  <button type=\"submit\" class=\"btn btn-warning\">Buscar</button>\r\n</form>\r\n\r\n<!-- Contenedor principal -->\r\n<main class=\"container\">\r\n  <section id=\"recipeSummary\" class=\"section scale-up-horizontal-center\">\r\n    <h2 id=\"nombreObjeto\"></h2>\r\n    <h3>Precio de Venta:</h3>\r\n    <input type=\"number\" id=\"precioObjeto\" class=\"price-input\" placeholder=\"Ingrese precio\" oninput=\"calcularGanancia()\">\r\n    <h3>Receta:</h3>\r\n    <ul id=\"ingredientes\"></ul>\r\n    <h3>Gasto: <span id=\"gasto\">0</span> K</h3>\r\n    <h3>Ganancia: <span id=\"ganancia\">0</span> K</h3>\r\n  </section>\r\n\r\n  <section id=\"calculationDetails\" class=\"section scale-up-horizontal-center\">\r\n    <h3>Cantidad a fabricar:</h3>\r\n    <input type=\"number\" id=\"cantidadFabricar\" value=\"1\" min=\"1\" class=\"price-input\" oninput=\"calcularGanancia()\">\r\n    <h3>Ganancia Total: <span id=\"gananciaTotal\">0</span> K</h3>\r\n    <h3>Gasto Total: <span id=\"gastoTotal\">0</span> K</h3>\r\n    <h3>Ingredientes Totales Necesarios:</h3>\r\n    <ul id=\"ingredientesTotales\"></ul>\r\n  </section>\r\n\r\n  <!-- Nueva secci√≥n de \"C√≥mo funciona\" -->\r\n  <section class=\"container mt-5 d-flex justify-content-center\">\r\n    <div class=\"p-4 bg-white rounded shadow\" style=\"max-width: 600px;\">\r\n      <h2 class=\"text-center\">¬øC√≥mo funciona Recetas Dofus?</h2>\r\n      <p class=\"mt-3\">\r\n        Usar Recetas Dofus es muy sencillo: ingres√° el nombre del objeto que deseas fabricar, obten√© la receta necesaria, \r\n        complet√° los precios de cada ingrediente y calcul√° autom√°ticamente tus costos y ganancias. \r\n        Pod√©s tambi√©n estimar la cantidad total de recursos necesarios para producciones en masa.\r\n      </p>\r\n    </div>\r\n  </section>\r\n</main>\r\n\r\n<script type=\"module\" src=\"js/calculo.js\"></script>\r\n<script type=\"module\" src=\"js/search.js\"></script>\r\n<script type=\"module\" src=\"js/render.js\"></script>\r\n\r\n<footer class=\"text-center mt-5\">\r\n  <p>¬© 2025 Jorge Fern√°ndez Rojo Andr√©s - \r\n    <a href=\"mailto:jf_wolf_887@hotmail.com\">Contacto</a> | \r\n    <a href=\"privacidad.html\">Pol√≠tica de Privacidad</a> |\r\n    <a href=\"terminos.html\">T√©rminos y Condiciones</a>\r\n  </p>\r\n  <div class=\"mt-3\">\r\n    <a href=\"https://www.youtube.com/@Yotaroto\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <img src=\"images/youtube.png\" alt=\"YouTube\" width=\"32\" height=\"32\" style=\"margin-right: 10px;\">\r\n    </a>\r\n    <a href=\"https://www.linkedin.com/in/jorgeandresfernandezrojo/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <img src=\"images/linkedin-logo.png\" alt=\"LinkedIn\" width=\"32\" height=\"32\">\r\n    </a>\r\n  </div>\r\n</footer>\r\n\r\n<!-- Bootstrap Bundle con Popper -->\r\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n<script src=\"js/verificarSesion.js\"></script>\r\n\r\n</body>\r\n</html>",
    "js": {
      "register.js": "console.log('üîµ Script register.js cargado correctamente'); // Confirmamos que el archivo JS se est√° cargando\r\n\r\nconst form = document.getElementById('registerForm');\r\nconst resultado = document.getElementById('resultado');\r\n\r\nif (!form) {\r\n  console.error('‚ùå No se encontr√≥ el formulario registerForm en el HTML');\r\n} else {\r\n  console.log('‚úÖ Formulario registerForm encontrado');\r\n}\r\n\r\nform.addEventListener('submit', async (e) => {\r\n  console.log('üü° Evento submit capturado en registerForm');\r\n\r\n  e.preventDefault();\r\n\r\n  const emailInput = document.getElementById('email');\r\n  const passwordInput = document.getElementById('password');\r\n\r\n  if (!emailInput || !passwordInput) {\r\n    console.error('‚ùå No se encontraron los campos email o password en el formulario');\r\n    return;\r\n  }\r\n\r\n  const email = emailInput.value;\r\n  const password = passwordInput.value;\r\n\r\n  console.log('üì§ Preparando env√≠o de datos:', { email, password });\r\n\r\n  // üí•üí•üí• AGREG√Å ESTE LOG\r\n  console.log('üõ´ Lanzando fetch hacia /api/register...');\r\n\r\n  try {\r\n    const response = await fetch('/api/register', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ email, password })\r\n    });\r\n\r\n    console.log('üì• Respuesta recibida del servidor:', response);\r\n\r\n    const data = await response.json();\r\n    console.log('üìÑ Respuesta parseada a JSON:', data);\r\n\r\n    if (response.ok) {\r\n      console.log('‚úÖ Registro exitoso, preparando redirecci√≥n...');\r\n      resultado.textContent = '‚úÖ Registro exitoso. Revisa tu correo para verificar tu cuenta.';\r\n      \r\n      setTimeout(() => {\r\n        console.log('‚û°Ô∏è Redirigiendo a login.html');\r\n        window.location.href = 'login.html';\r\n      }, 3000);\r\n    } else {\r\n      console.error('‚ùå Registro fallido. Error recibido:', data.error || 'Error desconocido');\r\n      resultado.textContent = '‚ùå Error: ' + (data.error || 'No se pudo registrar');\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error en la conexi√≥n o fetch fallido:', error);\r\n    resultado.textContent = '‚ùå Error en la conexi√≥n.';\r\n  }\r\n});\r\n",
      "verificarSesion.js": "document.addEventListener('DOMContentLoaded', async () => {\r\n  const token = localStorage.getItem('jwtToken');\r\n\r\n  const btnLogin = document.getElementById('btnRedirectLogin');\r\n  const btnRegister = document.getElementById('btnRedirectRegister');\r\n  const btnUltimasRecetas = document.getElementById('btnUltimasRecetas');\r\n  const btnVolversePremium = document.getElementById('btnVolversePremium');\r\n  const btnBeneficios = document.getElementById('btnBeneficios');\r\n  const btnLogout = document.getElementById('btnLogout');\r\n\r\n  if (!token) {\r\n    // Usuario no logueado\r\n    if (btnLogin) btnLogin.hidden = false;\r\n    if (btnRegister) btnRegister.hidden = false;\r\n    if (btnLogout) btnLogout.hidden = true;\r\n    if (btnUltimasRecetas) btnUltimasRecetas.hidden = true;\r\n    if (btnVolversePremium) btnVolversePremium.hidden = true;\r\n    if (btnBeneficios) btnBeneficios.hidden = true;\r\n  } else {\r\n    try {\r\n      const response = await fetch('/api/perfil', {\r\n        headers: { Authorization: 'Bearer ' + token }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!data.user || !data.user.isVerified) {\r\n        // Usuario logueado pero NO verificado\r\n        if (btnLogin) btnLogin.hidden = true;\r\n        if (btnRegister) btnRegister.hidden = true;\r\n        if (btnLogout) btnLogout.hidden = false;\r\n\r\n        if (btnUltimasRecetas) btnUltimasRecetas.hidden = true;\r\n        if (btnVolversePremium) btnVolversePremium.hidden = true;\r\n        if (btnBeneficios) btnBeneficios.hidden = true;\r\n\r\n        alert('‚ö†Ô∏è Tu cuenta todav√≠a no est√° verificada. Revis√° tu correo.');\r\n      } else {\r\n        // Usuario logueado y verificado\r\n        if (btnLogin) btnLogin.hidden = true;\r\n        if (btnRegister) btnRegister.hidden = true;\r\n        if (btnLogout) btnLogout.hidden = false;\r\n\r\n        if (btnUltimasRecetas) btnUltimasRecetas.hidden = false;\r\n        if (btnVolversePremium) btnVolversePremium.hidden = false;\r\n        if (btnBeneficios) btnBeneficios.hidden = false;\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error al verificar sesi√≥n:', error);\r\n    }\r\n  }\r\n\r\n  // ‚úÖ Evento para bot√≥n de Cerrar Sesi√≥n\r\n  if (btnLogout) {\r\n    btnLogout.addEventListener('click', () => {\r\n      console.log('üî¥ Cerrando sesi√≥n: Borrando token...');\r\n      localStorage.removeItem('jwtToken'); // Borramos el token del navegador\r\n      window.location.href = 'login.html'; // Redirigimos al login\r\n    });\r\n  }\r\n\r\n  // ‚úÖ Evento para bot√≥n de Registrarse\r\n  if (btnRegister) {\r\n    btnRegister.addEventListener('click', () => {\r\n      console.log('üîµ Redirigiendo a register.html');\r\n      window.location.href = 'register.html';\r\n    });\r\n  }\r\n});\r\n"
    },
    "login.html": "<!-- public/login.html -->\r\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n  <title>Login RD</title>\r\n</head>\r\n<body>\r\n  <h1>Login</h1>\r\n  <form id=\"loginForm\">\r\n    <input type=\"email\" id=\"email\" placeholder=\"Email\" required><br>\r\n    <input type=\"password\" id=\"password\" placeholder=\"Contrase√±a\" required><br>\r\n    <button type=\"submit\">Iniciar Sesi√≥n</button>\r\n  </form>\r\n\r\n  <button id=\"btnPerfil\">Ver Perfil</button>\r\n\r\n  <pre id=\"resultado\"></pre>\r\n\r\n  <script>\r\n    const form = document.getElementById('loginForm');\r\n    const resultado = document.getElementById('resultado');\r\n    const btnPerfil = document.getElementById('btnPerfil');\r\n\r\n    form.addEventListener('submit', async (e) => {\r\n      e.preventDefault();\r\n      const email = document.getElementById('email').value;\r\n      const password = document.getElementById('password').value;\r\n\r\n      try {\r\n        const response = await fetch('/api/login', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ email, password })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.token) {\r\n          localStorage.setItem('jwtToken', data.token);\r\n\r\n          resultado.textContent = '‚úÖ Login exitoso. Redirigiendo...';\r\n          // Redirigir al index despu√©s de iniciar sesi√≥n\r\n          setTimeout(() => window.location.href = 'index.html', 1000);\r\n        } else {\r\n          resultado.textContent = '‚ùå Error: ' + data.error;\r\n        }\r\n      } catch (error) {\r\n        resultado.textContent = '‚ùå Error en la conexi√≥n.';\r\n        console.error(error);\r\n      }\r\n    });\r\n\r\n    btnPerfil.addEventListener('click', async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) return resultado.textContent = '‚ö†Ô∏è Token no disponible. Inici√° sesi√≥n primero.';\r\n\r\n      const response = await fetch('/api/perfil', {\r\n        headers: { Authorization: 'Bearer ' + token }\r\n      });\r\n\r\n      const data = await response.json();\r\n      resultado.textContent = JSON.stringify(data, null, 2);\r\n    });\r\n  </script>\r\n</body>\r\n</html>\r\n",
    "register.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n  <title>Registro RD</title>\r\n  <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n</head>\r\n<body>\r\n  <div style=\"text-align: center; margin-top: 50px;\">\r\n    <h1>Crear Cuenta</h1>\r\n\r\n    <form id=\"registerForm\" style=\"display: inline-block; text-align: left;\">\r\n      <input type=\"email\" id=\"email\" placeholder=\"Email\" required style=\"display: block; margin: 10px 0;\"><br>\r\n      <input type=\"password\" id=\"password\" placeholder=\"Contrase√±a\" required style=\"display: block; margin: 10px 0;\"><br>\r\n      <button type=\"submit\" id=\"btnRegister\">Registrarse</button>\r\n    </form>\r\n\r\n    <pre id=\"resultado\" style=\"margin-top: 20px;\"></pre>\r\n  </div>\r\n\r\n  <!-- Script externo -->\r\n  <script type=\"module\" src=\"js/register.js\"></script>\r\n\r\n</body>\r\n</html>\r\n",
    "verificacionExitosa.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Cuenta Verificada</title>\r\n  <style>\r\n    body {\r\n      text-align: center;\r\n      font-family: sans-serif;\r\n      background: #f0f0f0;\r\n      padding: 50px;\r\n    }\r\n    img {\r\n      width: 300px;\r\n      margin-top: 30px;\r\n    }\r\n    h1 {\r\n      color: #28a745;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <h1>‚úÖ ¬°Cuenta verificada con √©xito!</h1>\r\n  <p>Gracias por unirte a Recetas Dofus. Ya pod√©s iniciar sesi√≥n.</p>\r\n  <img src=\"https://img1.reactor.cc/pics/post/Wakfu-dofus-Joris-Wakfu-Gif-2774181.gif\" alt=\"Verificaci√≥n Exitosa\">\r\n</body>\r\n</html>\r\n",
    "verificar.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Verificar cuenta</title>\r\n  <style>\r\n    body {\r\n      font-family: sans-serif;\r\n      text-align: center;\r\n      padding: 40px;\r\n    }\r\n    input {\r\n      margin: 10px;\r\n      padding: 10px;\r\n      width: 250px;\r\n    }\r\n    button {\r\n      padding: 10px 20px;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <h1>Verificar cuenta</h1>\r\n  <form id=\"formVerificar\">\r\n    <input type=\"email\" id=\"email\" placeholder=\"Tu correo\" required><br>\r\n    <input type=\"text\" id=\"codigo\" placeholder=\"C√≥digo recibido\" required><br>\r\n    <button type=\"submit\">Verificar</button>\r\n  </form>\r\n\r\n  <p id=\"mensaje\"></p>\r\n\r\n  <script>\r\n    document.getElementById('formVerificar').addEventListener('submit', async (e) => {\r\n      e.preventDefault();\r\n      const email = document.getElementById('email').value;\r\n      const codigo = document.getElementById('codigo').value;\r\n\r\n      try {\r\n        const res = await fetch('/api/verify-code', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ email, codigo })\r\n        });\r\n        const data = await res.json();\r\n        document.getElementById('mensaje').textContent = data.message || '‚úÖ Verificado correctamente';\r\n      } catch (err) {\r\n        document.getElementById('mensaje').textContent = '‚ùå Error al verificar.';\r\n        console.error(err);\r\n      }\r\n    });\r\n  </script>\r\n</body>\r\n</html>\r\n"
  },
  "server.js": "const express = require('express');\r\nconst path = require('path');\r\nconst axios = require('axios');\r\nconst { obtenerIngredientes } = require('./src/utils/scraper');\r\nconst authRoutes = require('./src/routes/authRoutes'); \r\nconst mongoose = require('mongoose');\r\nconst verificarToken = require('./src/middlewares/authMiddleware');\r\n\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\nconst DOFUSDB_API_URL = process.env.DOFUSDB_API_URL || \"https://api.dofusdb.fr/items\";\r\n\r\n// ‚úÖ Middleware para archivos est√°ticos (html, css, js, im√°genes, etc)\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// ‚úÖ Middleware para interpretar JSON\r\napp.use(express.json());\r\n\r\n// ‚úÖ Tus rutas de autenticaci√≥n\r\napp.use('/api', authRoutes);\r\n\r\n// ‚úÖ Conexi√≥n a MongoDB Atlas\r\nmongoose.connect(process.env.MONGO_URI)\r\n  .then(() => console.log('‚úÖ Conectado correctamente a MongoDB Atlas'))\r\n  .catch(err => console.error('‚ùå Error al conectar a MongoDB Atlas:', err));\r\n\r\n// ‚úÖ Ruta de b√∫squeda de recetas\r\napp.post('/api/recipes/search', async (req, res) => {\r\n  const { objectName } = req.body;\r\n\r\n  if (!objectName || !/^[a-zA-Z0-9\\s]+$/.test(objectName)) {\r\n    return res.status(400).json({ success: false, error: 'El nombre del objeto es inv√°lido o est√° vac√≠o.' });\r\n  }\r\n\r\n  try {\r\n    const formattedName = objectName.split(' ').join('+');\r\n    const url = `${DOFUSDB_API_URL}?slug.es[$search]=${formattedName}&level[$gte]=0&level[$lte]=200&lang=es`;\r\n\r\n    console.log(`[DEBUG] URL construida: ${url}`);\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        accept: \"application/json, text/plain, */*\",\r\n        \"accept-language\": \"es-ES,es;q=0.9\",\r\n        Referer: \"https://dofusdb.fr/\",\r\n      },\r\n    });\r\n\r\n    if (response.data.data.length === 0) {\r\n      console.log(`[INFO] No se encontraron resultados para: ${objectName}`);\r\n      return res.json({ success: true, data: null });\r\n    }\r\n\r\n    const item = response.data.data[0];\r\n    const recipeDetails = await obtenerIngredientes(item.id);\r\n\r\n    const formattedData = {\r\n      name: item.name?.es || 'Nombre no disponible',\r\n      recipe: recipeDetails\r\n    };\r\n\r\n    res.json({ success: true, data: formattedData });\r\n  } catch (error) {\r\n    console.error('[ERROR] Error al buscar la receta:', error.message);\r\n    res.status(500).json({ success: false, error: 'Error al buscar la receta.' });\r\n  }\r\n});\r\n\r\n// ‚úÖ Ruta protegida para obtener el perfil\r\napp.get('/api/perfil', verificarToken, (req, res) => {\r\n  res.json({\r\n    message: 'Perfil accedido correctamente',\r\n    usuario: req.user\r\n  });\r\n});\r\n\r\n// ‚úÖ Si no encuentra ruta, sirve autom√°ticamente el HTML correspondiente o error\r\n// (Esto lo hace autom√°ticamente express.static)\r\n\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`üöÄ Servidor corriendo en http://localhost:${PORT}`);\r\n});\r\n// console.log('üî¥ Cerrando sesi√≥n: Borrando token...');  \r\n",
  "src": {
    "middlewares": {
      "authMiddleware.js": "const { verifyToken } = require('../utils/jwt');\r\n\r\n// ‚úÖ Middleware para proteger rutas y verificar el token\r\nfunction verificarToken(req, res, next) {\r\n  const authHeader = req.headers['authorization'];\r\n\r\n  if (!authHeader) {\r\n    return res.status(401).json({ error: 'Token no proporcionado' });\r\n  }\r\n\r\n  const token = authHeader.replace('Bearer ', '');\r\n\r\n  try {\r\n    const decoded = verifyToken(token);\r\n    req.user = decoded; // Guardamos los datos del usuario en el request\r\n    next(); // Continuamos con la siguiente funci√≥n\r\n  } catch (error) {\r\n    console.error('‚ùå Error al verificar token:', error.message);\r\n    return res.status(401).json({ error: 'Token inv√°lido o expirado' });\r\n  }\r\n}\r\n\r\nmodule.exports = verificarToken;\r\n"
    },
    "models": {
      "User.js": "const mongoose = require('mongoose');\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n    lowercase: true,\r\n    trim: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  isPremium: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  isVerified: {\r\n    type: Boolean,\r\n    default: true // ‚úÖ verificado por defecto\r\n  }\r\n  ,\r\n  verificationToken: {\r\n    type: String\r\n  },\r\n  verificationExpires: {\r\n    type: Date\r\n  }\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model('User', userSchema);\r\n"
    },
    "routes": {
      "authRoutes.js": "const express = require('express');\r\nconst bcrypt = require('bcrypt');\r\nconst User = require('../models/User');\r\nconst router = express.Router();\r\nconst { generateToken, verifyToken } = require('../utils/jwt');\r\nconst verificarToken = require('../middlewares/authMiddleware');\r\n\r\n\r\nrouter.post('/register', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    return res.status(400).json({ error: 'Email y contrase√±a requeridos' });\r\n  }\r\n\r\n  try {\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) return res.status(409).json({ error: 'El usuario ya existe' });\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const newUser = new User({\r\n      email,\r\n      password: hashedPassword,\r\n      isVerified: false // ‚úÖ lo marcamos como verificado autom√°ticamente\r\n    });\r\n\r\n    await newUser.save();\r\n\r\n    const token = generateToken({\r\n      id: newUser._id,\r\n      email: newUser.email,\r\n      isPremium: newUser.isPremium\r\n    });\r\n\r\n    res.status(201).json({ message: 'Usuario registrado correctamente', token });\r\n  } catch (err) {\r\n    console.error('‚ùå Error en el registro:', err.message);\r\n    res.status(500).json({ error: 'Error del servidor' });\r\n  }\r\n});\r\n\r\n\r\nrouter.post('/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    return res.status(400).json({ error: 'Email y contrase√±a requeridos' });\r\n  }\r\n\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(404).json({ error: 'Usuario no encontrado' });\r\n\r\n    const passwordMatch = await bcrypt.compare(password, user.password);\r\n    if (!passwordMatch) return res.status(401).json({ error: 'Contrase√±a incorrecta' });\r\n\r\n    if (!user.isVerified) {\r\n      return res.status(403).json({ error: 'Cuenta no verificada. Revis√° tu correo electr√≥nico.' });\r\n    }\r\n\r\n    const token = generateToken({ id: user._id, email: user.email, isPremium: user.isPremium });\r\n\r\n    res.json({ message: 'Login exitoso', token });\r\n  } catch (err) {\r\n    console.error('‚ùå Error en login:', err.message);\r\n    res.status(500).json({ error: 'Error del servidor' });\r\n  }\r\n});\r\n\r\nrouter.get('/perfil', verificarToken, (req, res) => {\r\n  res.json({\r\n    message: '‚úÖ Acceso autorizado al perfil del usuario',\r\n    user: req.user\r\n  });\r\n});\r\n\r\nrouter.get('/verify', async (req, res) => {\r\n  const token = req.query.token;\r\n\r\n  if (!token) return res.status(400).send('Token faltante');\r\n\r\n  try {\r\n    const { id } = verifyToken(token);\r\n    const user = await User.findById(id);\r\n\r\n    if (!user) return res.status(404).send('Usuario no encontrado');\r\n\r\n    user.isVerified = true;\r\n    await user.save();\r\n\r\n    // ‚úÖ Redireccionar a p√°gina HTML con el GIF\r\n    res.redirect('/verificacionExitosa.html');\r\n\r\n  } catch (err) {\r\n    console.error('‚ùå Error verificando usuario:', err.message);\r\n    res.status(400).send('Token inv√°lido o expirado');\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
    },
    "utils": {
      "email.js": "const nodemailer = require('nodemailer');\r\n\r\n// ‚úÖ Configuramos el transporter de nodemailer\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  auth: {\r\n    user: 'andy46587@gmail.com', // üëâ Tu correo real\r\n    pass: 'vfkv sqwd varz iwtc'   // üëâ Tu contrase√±a de aplicaci√≥n de Gmail\r\n  }\r\n});\r\n\r\n// ‚úÖ Funci√≥n para enviar correo de verificaci√≥n\r\nasync function enviarCorreoVerificacion(destinatario, token) {\r\n  const urlVerificacion = `http://localhost:3000/api/verify?token=${token}`; // En producci√≥n deber√≠as cambiar \"localhost\" por tu dominio real.\r\n\r\n  const mailOptions = {\r\n    from: '\"Recetas Dofus\" <andy46587@gmail.com>', // üëâ Bien escrito, nombre entre comillas\r\n    to: destinatario,\r\n    subject: 'Verific√° tu cuenta en Recetas Dofus',\r\n    html: `\r\n      <h2>¬°Bienvenido a Recetas Dofus!</h2>\r\n      <p>Hac√© clic en el siguiente bot√≥n para verificar tu cuenta:</p>\r\n      <a href=\"${urlVerificacion}\" style=\"background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">Verificar Cuenta</a>\r\n      <p>Este enlace expirar√° en 1 hora.</p>\r\n    `\r\n  };\r\n\r\n  try {\r\n    const info = await transporter.sendMail(mailOptions);\r\n    console.log(`‚úÖ Correo de verificaci√≥n enviado a ${destinatario}: ${info.response}`);\r\n  } catch (error) {\r\n    console.error('‚ùå Error al enviar correo de verificaci√≥n:', error);\r\n  }\r\n}\r\n\r\n// ‚úÖ Exportamos la funci√≥n\r\nmodule.exports = enviarCorreoVerificacion;\r\n"
    }
  }
}