{
  "public": {
    "blog.html": "<!-- public/blog.html -->  \r\n<!DOCTYPE html>  \r\n<html lang=\"es\">  \r\n<head>  \r\n  <!-- Similar a index.html con los metadatos y estilos -->  \r\n  <title>Blog de Objetos - DofusDB</title>  \r\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">  \r\n  <link rel=\"stylesheet\" href=\"css/style.css\">  \r\n  <!-- Añadir FontAwesome para los iconos de like -->  \r\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">  \r\n</head>  \r\n<body>  \r\n  <!-- Navegación -->  \r\n  <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">  \r\n    <div class=\"container\">  \r\n      <a class=\"navbar-brand\" href=\"index.html\">DofusDB</a>  \r\n      <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\">  \r\n        <span class=\"navbar-toggler-icon\"></span>  \r\n      </button>  \r\n      <div class=\"collapse navbar-collapse\" id=\"navbarNav\">  \r\n        <ul class=\"navbar-nav\">  \r\n          <li class=\"nav-item\">  \r\n            <a class=\"nav-link\" href=\"index.html\">Inicio</a>  \r\n          </li>  \r\n          <li class=\"nav-item\">  \r\n            <a class=\"nav-link active\" href=\"blog.html\">Blog</a>  \r\n          </li>  \r\n        </ul>  \r\n      </div>  \r\n    </div>  \r\n  </nav>  \r\n  \r\n  <div class=\"container mt-4\">  \r\n    <h1 class=\"text-center\">Blog de Objetos</h1>  \r\n      \r\n    <!-- Filtros -->  \r\n    <div class=\"row mb-4\">  \r\n      <div class=\"col-md-6\">  \r\n        <label for=\"ordenarPor\" class=\"form-label\">Ordenar por:</label>  \r\n        <select id=\"ordenarPor\" class=\"form-select\">  \r\n          <option value=\"reciente\">Más recientes</option>  \r\n          <option value=\"valor\">Mayor valor</option>  \r\n        </select>  \r\n      </div>  \r\n      <div class=\"col-md-6\">  \r\n        <label for=\"filtroValor\" class=\"form-label\">Valor mínimo:</label>  \r\n        <input type=\"number\" id=\"filtroValor\" class=\"form-control\" min=\"0\" value=\"0\">  \r\n      </div>  \r\n    </div>  \r\n      \r\n    <button id=\"aplicarFiltros\" class=\"btn btn-primary mb-4\">Aplicar filtros</button>  \r\n      \r\n    <!-- Contenedor de posts -->  \r\n    <div id=\"contenedor-posts\" class=\"row\">  \r\n      <!-- Los posts se cargarán aquí dinámicamente -->  \r\n    </div>  \r\n  </div>  \r\n    \r\n  <!-- Modal para comentarios -->  \r\n  <div class=\"modal fade\" id=\"comentariosModal\" tabindex=\"-1\">  \r\n    <div class=\"modal-dialog\">  \r\n      <div class=\"modal-content\">  \r\n        <div class=\"modal-header\">  \r\n          <h5 class=\"modal-title\">Comentarios</h5>  \r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>  \r\n        </div>  \r\n        <div class=\"modal-body\">  \r\n          <div id=\"listaComentarios\">  \r\n            <!-- Comentarios cargados dinámicamente -->  \r\n          </div>  \r\n          <form id=\"formComentario\" class=\"mt-3\">  \r\n            <input type=\"hidden\" id=\"postId\">  \r\n            <div class=\"mb-3\">  \r\n              <textarea id=\"textoComentario\" class=\"form-control\" rows=\"3\" placeholder=\"Escribe tu comentario...\"></textarea>  \r\n            </div>  \r\n            <button type=\"submit\" class=\"btn btn-primary\">Enviar comentario</button>  \r\n          </form>  \r\n        </div>  \r\n      </div>  \r\n    </div>  \r\n  </div>  \r\n  \r\n  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>  \r\n  <script type=\"module\" src=\"js/blog.js\"></script>  \r\n  <script type=\"module\" src=\"js/verificarSesion.js\"></script>  \r\n</body>  \r\n</html>",
    "components": {
      "videoModal.html": "<!-- components/videoModal.html -->\r\n<div id=\"videoModal\" class=\"modal fade\" tabindex=\"-1\" aria-labelledby=\"videoModalLabel\" aria-hidden=\"true\">\r\n  <!-- Cambiado modal-lg por modal-custom-left para tamaño y posición -->\r\n  <div class=\"modal-dialog modal-custom-left\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\" id=\"videoModalLabel\">¡Bienvenido!</h5>\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Cerrar\"></button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"ratio ratio-16x9\">\r\n          <iframe\r\n            id=\"youtubePlaylist\"\r\n            src=\"https://www.youtube.com/embed/LbfGI-TvdZU?list=PLUT8lOtOMxzpuFMfcKvI1SPE1ivmabsj8&autoplay=1&mute=1&loop=1&playlist=PLUT8lOtOMxzpuFMfcKvI1SPE1ivmabsj8\"\r\n            title=\"Reproducción automática\"\r\n            allow=\"autoplay; encrypted-media\"\r\n            allowfullscreen\r\n          ></iframe>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
    },
    "images": {
      "favicon.png": "(binary)",
      "fondooficion.JPG": "(binary)",
      "linkedin-logo.png": "(binary)",
      "seccion1.JPG": "(binary)",
      "seccion2.JPG": "(binary)",
      "youtube.png": "(binary)"
    },
    "index.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <!-- Bootstrap CSS -->\r\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Búsqueda de Recetas en Dofus - Calculador de Ganancias</title>\r\n\r\n  <!-- SEO Básico -->\r\n  <meta name=\"description\" content=\"Buscador de recetas de objetos de Dofus. Calcula tus ganancias de forma rápida y sencilla.\">\r\n  <meta name=\"keywords\" content=\"Dofus, recetas, objetos, kamas, búsqueda, economía, alquimia, herrero, crudo, oficio\">\r\n  <meta name=\"robots\" content=\"index, follow\">\r\n  <meta name=\"author\" content=\"Jorge Fernández Rojo Andrés\">\r\n  <link rel=\"canonical\" href=\"https://recetasdofus.com.ar\">\r\n\r\n  <!-- Open Graph -->\r\n  <meta property=\"og:title\" content=\"Búsqueda de Recetas - DofusDB\">\r\n  <meta property=\"og:description\" content=\"Calculá cuánto ganás al fabricar objetos en Dofus.\">\r\n  <meta property=\"og:image\" content=\"https://recetasdofus.com.ar/images/favicon.png\">\r\n  <meta property=\"og:url\" content=\"https://recetasdofus.com.ar\">\r\n  <meta property=\"og:type\" content=\"website\">\r\n\r\n  <link rel=\"stylesheet\" href=\"css/style.css\">\r\n  <link rel=\"icon\" href=\"images/favicon.png\" type=\"image/png\">\r\n\r\n  <!-- Google tag (gtag.js) -->\r\n  <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8948109105283119\" crossorigin=\"anonymous\"></script>\r\n  <script async src=\"https://www.googletagmanager.com/gtag/js?id=G-GHSB8ZF8WD\"></script>\r\n  <script>\r\n    window.dataLayer = window.dataLayer || [];\r\n    function gtag(){dataLayer.push(arguments);}\r\n    gtag('js', new Date());\r\n    gtag('config', 'G-GHSB8ZF8WD');\r\n  </script>\r\n</head>\r\n\r\n<body>\r\n\r\n<!-- Barra de navegación -->  \r\n  <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">  \r\n    <div class=\"container\">  \r\n      <a class=\"navbar-brand\" href=\"index.html\">DofusDB</a>  \r\n      <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\">  \r\n        <span class=\"navbar-toggler-icon\"></span>  \r\n      </button>  \r\n      <div class=\"collapse navbar-collapse\" id=\"navbarNav\">  \r\n        <ul class=\"navbar-nav me-auto\">  \r\n          <li class=\"nav-item\">  \r\n            <a class=\"nav-link active\" href=\"index.html\">Inicio</a>  \r\n          </li>  \r\n          <li class=\"nav-item\">  \r\n            <a class=\"nav-link\" href=\"blog.html\">Blog</a>  \r\n          </li>  \r\n        </ul>  \r\n        <div class=\"d-flex\">  \r\n          <!-- Botones para NO logueados -->  \r\n          <button id=\"btnRedirectLogin\" class=\"btn btn-outline-light me-2\" hidden>Iniciar Sesión</button>  \r\n          <button id=\"btnRedirectRegister\" class=\"btn btn-warning\" hidden>Registrarse</button>  \r\n            \r\n          <!-- Botones para logueados -->  \r\n          <button id=\"btnUltimasRecetas\" class=\"btn btn-outline-light me-2\" hidden>Últimas Recetas</button>  \r\n          <button id=\"btnVolversePremium\" class=\"btn btn-warning me-2\" hidden>Volverse Premium</button>  \r\n          <button id=\"btnBeneficios\" class=\"btn btn-outline-light me-2\" hidden>Ver Beneficios Premium</button>  \r\n          <button id=\"btnLogout\" class=\"btn btn-danger\" hidden>Cerrar Sesión</button>  \r\n        </div>  \r\n      </div>  \r\n    </div>  \r\n  </nav> \r\n<!-- Nueva sección introductoria -->\r\n<section class=\"container mt-5 d-flex justify-content-center\">\r\n  <div class=\"p-4 bg-white rounded shadow\" style=\"max-width: 600px;\">\r\n    <h2 class=\"text-center\">¿Qué es Recetas Dofus?</h2>\r\n    <p class=\"mt-3\">\r\n      Recetas Dofus es una herramienta gratuita pensada para los jugadores de Dofus que desean maximizar sus ganancias dentro del juego. \r\n      Buscá recetas de objetos, calculá tus costos de fabricación y estimá tus ganancias de forma rápida y sencilla.\r\n    </p>\r\n  </div>\r\n</section>\r\n\r\n<h1 class=\"text-center mt-4\">Buscador de Recetas en Dofus y Calculador de Ganancias</h1>\r\n\r\n<!-- Formulario de búsqueda -->\r\n<form id=\"searchForm\" class=\"text-center mt-3\">\r\n  <label for=\"objectName\">Nombre del objeto:</label>\r\n  <input type=\"text\" id=\"objectName\" placeholder=\"Buscar receta\" required>\r\n  <button type=\"submit\" class=\"btn btn-warning\">Buscar</button>\r\n</form>\r\n\r\n<!-- Contenedor principal -->\r\n<main class=\"container\">\r\n  <section id=\"recipeSummary\" class=\"section scale-up-horizontal-center\">\r\n    <h2 id=\"nombreObjeto\"></h2>\r\n    <h3>Precio de Venta:</h3>\r\n    <input type=\"number\" id=\"precioObjeto\" class=\"price-input\" placeholder=\"Ingrese precio\" oninput=\"calcularGanancia()\">\r\n    <h3>Receta:</h3>\r\n    <ul id=\"ingredientes\"></ul>\r\n    <h3>Gasto: <span id=\"gasto\">0</span> K</h3>\r\n    <h3>Ganancia: <span id=\"ganancia\">0</span> K</h3>\r\n  </section>\r\n\r\n  <section id=\"calculationDetails\" class=\"section scale-up-horizontal-center\">\r\n    <h3>Cantidad a fabricar:</h3>\r\n    <input type=\"number\" id=\"cantidadFabricar\" value=\"1\" min=\"1\" class=\"price-input\" oninput=\"calcularGanancia()\">\r\n    <h3>Ganancia Total: <span id=\"gananciaTotal\">0</span> K</h3>\r\n    <h3>Gasto Total: <span id=\"gastoTotal\">0</span> K</h3>\r\n    <h3>Ingredientes Totales Necesarios:</h3>\r\n    <ul id=\"ingredientesTotales\"></ul>\r\n  </section>\r\n\r\n  <!-- Nueva sección de \"Cómo funciona\" -->\r\n  <section class=\"container mt-5 d-flex justify-content-center\">\r\n    <div class=\"p-4 bg-white rounded shadow\" style=\"max-width: 600px;\">\r\n      <h2 class=\"text-center\">¿Cómo funciona Recetas Dofus?</h2>\r\n      <p class=\"mt-3\">\r\n        Usar Recetas Dofus es sencillo: ingresá el nombre del objeto, obtené la receta, completá precios y calculá costos y ganancias automáticamente. \r\n        También podés calcular los ingredientes necesarios para producciones en masa.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- Nueva sección de Preguntas Frecuentes -->\r\n  <section class=\"container mt-5 d-flex justify-content-center\">\r\n    <div class=\"p-4 bg-white rounded shadow\" style=\"max-width: 600px;\">\r\n      <h2 class=\"text-center\">Preguntas Frecuentes</h2>\r\n      <h5 class=\"mt-3\">1. ¿Esta herramienta es gratuita?</h5>\r\n      <p>Sí, Recetas Dofus es completamente gratuita para todos los usuarios.</p>\r\n\r\n      <h5 class=\"mt-3\">2. ¿Necesito registrarme para usarla?</h5>\r\n      <p>No es necesario registrarse para buscar recetas. El registro es opcional para acceder a funciones premium.</p>\r\n\r\n      <h5 class=\"mt-3\">3. ¿Los datos de precios se actualizan?</h5>\r\n      <p>Los datos se basan en la API de DofusDB, por lo que reflejan el contenido disponible más reciente.</p>\r\n    </div>\r\n  </section>\r\n</main>\r\n\r\n<script type=\"module\" src=\"js/calculo.js\"></script>\r\n<script type=\"module\" src=\"js/search.js\"></script>\r\n<script type=\"module\" src=\"js/render.js\"></script>\r\n\r\n<footer class=\"text-center mt-5\">\r\n  <p>© 2025 Jorge Fernández Rojo Andrés - \r\n    <a href=\"mailto:jf_wolf_887@hotmail.com\">Contacto</a> | \r\n    <a href=\"privacidad.html\">Política de Privacidad</a> |\r\n    <a href=\"terminos.html\">Términos y Condiciones</a>\r\n  </p>\r\n  <div class=\"mt-3\">\r\n    <a href=\"https://www.youtube.com/@Yotaroto\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <img src=\"images/youtube.png\" alt=\"YouTube\" width=\"32\" height=\"32\" style=\"margin-right: 10px;\">\r\n    </a>\r\n    <a href=\"https://www.linkedin.com/in/jorgeandresfernandezrojo/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <img src=\"images/linkedin-logo.png\" alt=\"LinkedIn\" width=\"32\" height=\"32\">\r\n    </a>\r\n  </div>\r\n</footer>\r\n<!-- Modal de Verificación -->\r\n<div class=\"modal fade\" id=\"verificacionModal\" tabindex=\"-1\" aria-labelledby=\"verificacionModalLabel\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\" id=\"verificacionModalLabel\">⚠️ Cuenta no verificada</h5>\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Cerrar\"></button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <p>Tu cuenta todavía no está verificada. Revisá tu correo electrónico para completar la verificación.</p>\r\n        <p>¿No recibiste el correo? Podés solicitar uno nuevo haciendo clic en el botón de abajo.</p>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cerrar</button>\r\n        <button type=\"button\" class=\"btn btn-primary\" id=\"btnReenviarVerificacion\">Reenviar correo de verificación</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Bootstrap Bundle con Popper -->\r\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n<script src=\"js/verificarSesion.js\"></script>\r\n\r\n</body>\r\n</html>\r\n",
    "js": {
      "blog.js": "// public/js/blog.js  \r\ndocument.addEventListener('DOMContentLoaded', () => {  \r\n  const contenedorPosts = document.getElementById('contenedor-posts');  \r\n  const ordenarPorSelect = document.getElementById('ordenarPor');  \r\n  const filtroValorInput = document.getElementById('filtroValor');  \r\n  const aplicarFiltrosBtn = document.getElementById('aplicarFiltros');  \r\n  const formComentario = document.getElementById('formComentario');  \r\n  const comentariosModal = new bootstrap.Modal(document.getElementById('comentariosModal'));  \r\n    \r\n  // Cargar posts al iniciar  \r\n  cargarPosts();  \r\n    \r\n  // Evento para aplicar filtros  \r\n  aplicarFiltrosBtn.addEventListener('click', cargarPosts);  \r\n    \r\n  // Evento para enviar comentario  \r\n  formComentario.addEventListener('submit', enviarComentario);  \r\n    \r\n  async function cargarPosts() {  \r\n    try {  \r\n      const ordenarPor = ordenarPorSelect.value;  \r\n      const filtroValor = filtroValorInput.value;  \r\n        \r\n      const url = `/api/posts?ordenarPor=${ordenarPor}&filtroValor=${filtroValor}`;  \r\n      const res = await fetch(url);  \r\n      const data = await res.json();  \r\n        \r\n      if (!data.success) {  \r\n        throw new Error(data.error || 'Error al cargar los posts');  \r\n      }  \r\n        \r\n      renderizarPosts(data.data);  \r\n    } catch (error) {  \r\n      console.error('Error:', error);  \r\n      contenedorPosts.innerHTML = `<div class=\"col-12 text-center text-danger\">  \r\n        <p>Error al cargar los posts. Por favor, intenta de nuevo más tarde.</p>  \r\n      </div>`;  \r\n    }  \r\n  }  \r\n    \r\n  function renderizarPosts(posts) {  \r\n    if (!posts || posts.length === 0) {  \r\n      contenedorPosts.innerHTML = `<div class=\"col-12 text-center\">  \r\n        <p>No hay posts disponibles con los filtros actuales.</p>  \r\n      </div>`;  \r\n      return;  \r\n    }  \r\n    \r\n    contenedorPosts.innerHTML = '';  \r\n    \r\n    posts.forEach(post => {  \r\n      const fechaActualizacion = new Date(post.fechaActualizacion);  \r\n      const tiempoTranscurrido = obtenerTiempoTranscurrido(fechaActualizacion);  \r\n    \r\n      const card = document.createElement('div');  \r\n      card.className = 'col-md-4 mb-4';  \r\n    \r\n      card.innerHTML = `  \r\n        <div class=\"card h-100 shadow-sm\">  \r\n          <img src=\"${post.imagen || 'images/default-item.png'}\" class=\"card-img-top\" alt=\"${post.nombre}\">  \r\n          <div class=\"card-body\">  \r\n            <h5 class=\"card-title\">${post.nombre}</h5>  \r\n            <p class=\"card-text\">${post.descripcion || 'Sin descripción'}</p>  \r\n            <p class=\"text-muted small\">Ingredientes: ${post.ingredientes?.join(', ') || 'Ninguno'}</p>  \r\n            <p class=\"text-success\">Valor: ${post.valor} kamas</p>  \r\n            <p class=\"text-muted small\">${tiempoTranscurrido}</p>\r\n            <div class=\"d-flex justify-content-between align-items-center\">  \r\n              <button class=\"btn btn-sm btn-outline-primary like-btn\" data-id=\"${post._id}\">  \r\n                <i class=\"fas fa-thumbs-up\"></i> ${post.likes || 0}  \r\n              </button>  \r\n              <button class=\"btn btn-sm btn-outline-secondary comentario-btn\" data-id=\"${post._id}\">  \r\n                <i class=\"fas fa-comments\"></i> Ver comentarios  \r\n              </button>  \r\n            </div>  \r\n          </div>  \r\n        </div>`;  \r\n    \r\n      contenedorPosts.appendChild(card);  \r\n    });  \r\n    \r\n    // Asignar eventos a los nuevos botones  \r\n    document.querySelectorAll('.like-btn').forEach(btn => {\r\n      btn.addEventListener('click', manejarLike);\r\n    });\r\n\r\n    document.querySelectorAll('.comentario-btn').forEach(btn => {\r\n      btn.addEventListener('click', mostrarComentarios);\r\n    });\r\n  }\r\n\r\n  function obtenerTiempoTranscurrido(fecha) {\r\n    const ahora = new Date();\r\n    const segundos = Math.floor((ahora - fecha) / 1000);\r\n\r\n    const minutos = Math.floor(segundos / 60);\r\n    const horas = Math.floor(minutos / 60);\r\n    const dias = Math.floor(horas / 24);\r\n\r\n    if (dias > 0) return `Actualizado hace ${dias} día(s)`;\r\n    if (horas > 0) return `Actualizado hace ${horas} hora(s)`;\r\n    if (minutos > 0) return `Actualizado hace ${minutos} minuto(s)`;\r\n    return `Actualizado hace unos segundos`;\r\n  }\r\n\r\n  // Función de ejemplo para enviar comentarios\r\n  async function enviarComentario(e) {\r\n    e.preventDefault();\r\n    console.log('Comentario enviado (completa esta función)');\r\n  }\r\n\r\n  // Función de ejemplo para manejar likes\r\n  function manejarLike(e) {\r\n    const idPost = e.currentTarget.dataset.id;\r\n    console.log(`Like al post ${idPost} (completa esta función)`);\r\n  }\r\n\r\n  // Función de ejemplo para mostrar comentarios\r\n  function mostrarComentarios(e) {\r\n    const idPost = e.currentTarget.dataset.id;\r\n    console.log(`Mostrar comentarios del post ${idPost} (completa esta función)`);\r\n    comentariosModal.show();\r\n  }\r\n});\r\n",
      "calculo.js": "export function calcularGanancia() {\r\n  let gasto = 0; // Reiniciamos el gasto\r\n\r\n  // Obtener la cantidad de objetos a fabricar\r\n  const cantidadFabricarInput = document.getElementById(\"cantidadFabricar\");\r\n  const cantidadFabricar = cantidadFabricarInput ? parseInt(cantidadFabricarInput.value) || 1 : 1;\r\n\r\n  console.log(`[DEBUG] Cantidad a fabricar: ${cantidadFabricar}`);\r\n\r\n  // Obtener los ingredientes desde el dataset\r\n  const ingredientesElement = document.getElementById(\"ingredientes\");\r\n  if (!ingredientesElement || !ingredientesElement.dataset.ingredientes) {\r\n    console.warn(\"[WARNING] No se encontraron ingredientes en el dataset.\");\r\n    return;\r\n  }\r\n\r\n  const ingredientes = JSON.parse(ingredientesElement.dataset.ingredientes || \"[]\");\r\n  console.log(\"[DEBUG] Ingredientes cargados:\", ingredientes);\r\n\r\n  let ingredientesTotalesHTML = \"\";\r\n\r\n  ingredientes.forEach(ingrediente => {\r\n    const inputPrecio = document.getElementById(`precio-${ingrediente.id}`);\r\n    \r\n    if (!inputPrecio) {\r\n      console.warn(`[WARNING] No se encontró el input para el ingrediente: ${ingrediente.name}`);\r\n      return;\r\n    }\r\n\r\n    // Obtener el precio unitario ingresado por el usuario\r\n    const precioUnitario = parseFloat(inputPrecio.value) || 0;\r\n    console.log(`[DEBUG] Precio de ${ingrediente.name}: ${precioUnitario} K`);\r\n\r\n    // 🔥 Calcular el costo total del ingrediente (precio unitario * cantidad requerida)\r\n    const costoIngrediente = precioUnitario * ingrediente.quantity;\r\n    gasto += costoIngrediente; // Sumar al gasto total de la receta\r\n\r\n    // Calcular cantidad total de ingredientes requeridos según la cantidad a fabricar\r\n    const cantidadTotal = ingrediente.quantity * cantidadFabricar;\r\n    ingredientesTotalesHTML += `\r\n      <li>\r\n        <img src=\"${ingrediente.image}\" alt=\"${ingrediente.name}\" style=\"width: 40px; height: 40px; vertical-align: middle;\" />\r\n        ${ingrediente.name}: <strong>${cantidadTotal}</strong> unidades\r\n      </li>\r\n    `;\r\n  });\r\n\r\n  // 🔥 Calcular el Gasto Total multiplicando el gasto base por la cantidad a fabricar\r\n  const gastoTotal = gasto * cantidadFabricar;\r\n\r\n  // Verificar si el input del precio del objeto existe antes de obtener su valor\r\n  const precioObjetoInput = document.getElementById(\"precioObjeto\");\r\n  const precioObjeto = precioObjetoInput ? parseFloat(precioObjetoInput.value) || 0 : 0;\r\n\r\n  console.log(\"[DEBUG] Precio del objeto:\", precioObjeto);\r\n\r\n  // Calcular la ganancia correctamente\r\n  const ganancia = (precioObjeto * cantidadFabricar) - gastoTotal;\r\n\r\n  // ✅ Actualizar el Gasto en la sección verde\r\n  const gastoElement = document.getElementById(\"gasto\");\r\n  if (gastoElement) gastoElement.textContent = `${gasto} K`;\r\n\r\n  // ✅ Actualizar la Ganancia en la sección verde\r\n  const gananciaElement = document.getElementById(\"ganancia\");\r\n  if (gananciaElement) gananciaElement.textContent = `${ganancia} K`;\r\n\r\n  // ✅ Actualizar la Ganancia Total en la sección azul\r\n  const gananciaTotalElement = document.getElementById(\"gananciaTotal\");\r\n  if (gananciaTotalElement) gananciaTotalElement.textContent = `${ganancia} K`;\r\n\r\n  // ✅ Restaurar la actualización de \"Gasto Total\" en la sección azul\r\n  let gastoTotalElement = document.getElementById(\"gastoTotal\");\r\n  if (!gastoTotalElement) {\r\n    const calculationDetails = document.getElementById(\"calculationDetails\");\r\n    gastoTotalElement = document.createElement(\"h3\");\r\n    gastoTotalElement.id = \"gastoTotal\";\r\n    calculationDetails.appendChild(gastoTotalElement);\r\n  }\r\n  gastoTotalElement.textContent = `Gasto Total: ${gastoTotal} K`;\r\n\r\n  // Actualizar la lista de ingredientes totales necesarios\r\n  const ingredientesTotalesElement = document.getElementById(\"ingredientesTotales\");\r\n  if (ingredientesTotalesElement) ingredientesTotalesElement.innerHTML = ingredientesTotalesHTML;\r\n\r\n  console.log(\"[DEBUG] Cálculo completado:\");\r\n  console.log(` - Gasto: ${gasto} K`);\r\n  console.log(` - Gasto Total: ${gastoTotal} K`);\r\n  console.log(` - Ganancia: ${ganancia} K`);\r\n\r\n  // ✅ Sincronizar con el blog (solo si la función está definida)\r\n  if (typeof sincronizarConBlog === 'function') {\r\n    sincronizarConBlog();\r\n  }\r\n}\r\n\r\n// Asegurar que la función sea accesible globalmente\r\nwindow.calcularGanancia = calcularGanancia;\r\n",
      "login.js": "document.addEventListener('DOMContentLoaded', () => {\r\n    const form = document.getElementById('loginForm');\r\n  \r\n    if (form) {\r\n      form.addEventListener('submit', async (e) => {\r\n        e.preventDefault();\r\n  \r\n        const email = document.getElementById('email').value;\r\n        const password = document.getElementById('password').value;\r\n  \r\n        try {\r\n          const response = await fetch('/api/login', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ email, password })\r\n          });\r\n  \r\n          const data = await response.json();\r\n  \r\n          if (response.ok) {\r\n            // Si login exitoso, guardar token y redirigir\r\n            localStorage.setItem('jwtToken', data.token);\r\n            window.location.href = 'index.html';\r\n          } else if (response.status === 403 && data.error.includes('no verificada')) {\r\n            // Mostrar el modal en lugar de alert si la cuenta no está verificada\r\n            mostrarModalVerificacion();\r\n          } else {\r\n            // Mostrar otros errores\r\n            alert(`❌ Error: ${data.error || 'Ocurrió un error inesperado'}`);\r\n          }\r\n        } catch (error) {\r\n          console.error('❌ Error en login:', error);\r\n          alert('❌ Error de conexión. Intentá nuevamente más tarde.');\r\n        }\r\n      });\r\n    }\r\n  });\r\n  ",
      "recuperar.js": "const form = document.getElementById('recuperarForm');\r\nconst resultado = document.getElementById('resultado');\r\n\r\nform.addEventListener('submit', async (e) => {\r\n  e.preventDefault();\r\n  const email = document.getElementById('email').value.trim().toLowerCase();\r\n\r\n  try {\r\n    const response = await fetch('/api/recuperar', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ email })\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.success) {\r\n      resultado.textContent = '✅ Revisa tu correo electrónico para recuperar tu contraseña.';\r\n    } else {\r\n      resultado.textContent = '❌ ' + (data.error || 'No se pudo procesar la solicitud.');\r\n    }\r\n  } catch (error) {\r\n    resultado.textContent = '❌ Error en la conexión.';\r\n    console.error(error);\r\n  }\r\n});\r\n",
      "register.js": "console.log('🔵 Script register.js cargado correctamente'); // Confirmamos que el archivo JS se está cargando\r\n\r\nconst form = document.getElementById('registerForm');\r\nconst resultado = document.getElementById('resultado');\r\n\r\nif (!form) {\r\n  console.error('❌ No se encontró el formulario registerForm en el HTML');\r\n} else {\r\n  console.log('✅ Formulario registerForm encontrado');\r\n}\r\n\r\nform.addEventListener('submit', async (e) => {\r\n  console.log('🟡 Evento submit capturado en registerForm');\r\n\r\n  e.preventDefault();\r\n\r\n  const emailInput = document.getElementById('email');\r\n  const passwordInput = document.getElementById('password');\r\n\r\n  if (!emailInput || !passwordInput) {\r\n    console.error('❌ No se encontraron los campos email o password en el formulario');\r\n    return;\r\n  }\r\n\r\n  const email = emailInput.value;\r\n  const password = passwordInput.value;\r\n\r\n  console.log('📤 Preparando envío de datos:', { email, password });\r\n\r\n  // 💥💥💥 AGREGÁ ESTE LOG\r\n  console.log('🛫 Lanzando fetch hacia /api/register...');\r\n\r\n  try {\r\n    const response = await fetch('/api/register', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ email, password })\r\n    });\r\n\r\n    console.log('📥 Respuesta recibida del servidor:', response);\r\n\r\n    const data = await response.json();\r\n    console.log('📄 Respuesta parseada a JSON:', data);\r\n\r\n    if (response.ok) {\r\n      console.log('✅ Registro exitoso, preparando redirección...');\r\n      resultado.textContent = '✅ Registro exitoso. Revisa tu correo para verificar tu cuenta.';\r\n      \r\n      setTimeout(() => {\r\n        console.log('➡️ Redirigiendo a login.html');\r\n        window.location.href = 'login.html';\r\n      }, 3000);\r\n    } else {\r\n      console.error('❌ Registro fallido. Error recibido:', data.error || 'Error desconocido');\r\n      resultado.textContent = '❌ Error: ' + (data.error || 'No se pudo registrar');\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ Error en la conexión o fetch fallido:', error);\r\n    resultado.textContent = '❌ Error en la conexión.';\r\n  }\r\n});\r\n",
      "render.js": "import { calcularGanancia } from './calculo.js';\r\n\r\n// Función para renderizar listas de efectos\r\nexport const renderEffects = (effects) => {\r\n  if (!effects || effects.length === 0) {\r\n    return \"<li>Sin efectos disponibles</li>\";\r\n  }\r\n  return effects\r\n    .map(\r\n      (effect) =>\r\n        `<li>${effect.characteristic || \"Efecto desconocido\"}: ${effect.from || 0} a ${effect.to || 0}</li>`\r\n    )\r\n    .join(\"\");\r\n};\r\n\r\n// Función para renderizar la receta en el frontend con inputs de precios\r\nexport const renderRecipe = (recipe) => {\r\n  if (!recipe || recipe.length === 0) {\r\n    return \"<li>Receta no disponible</li>\";\r\n  }\r\n\r\n  return recipe.map(ingredient => {\r\n    const inputId = `precio-${ingredient.id}`;\r\n    return `\r\n      <li>\r\n        <img src=\"${ingredient.image}\" alt=\"${ingredient.name}\" style=\"width: 40px; height: 40px; vertical-align: middle;\" />\r\n        ${ingredient.name} (Cantidad: ${ingredient.quantity || \"N/A\"})\r\n        <input type=\"number\" class=\"price-input\" id=\"${inputId}\" placeholder=\"Precio por unidad\">\r\n      </li>\r\n    `;\r\n  }).join(\"\");\r\n};\r\n\r\n// ✅ Función mejorada para asignar eventos de cálculo a los inputs después de renderizar la receta\r\nexport function asignarEventosCalculo() {\r\n  document.querySelectorAll(\".price-input\").forEach(input => {\r\n    input.removeEventListener(\"input\", calcularGanancia); // 🔥 Evita eventos duplicados\r\n    input.addEventListener(\"input\", () => {\r\n      console.log(`[DEBUG] Evento disparado en: ${input.id}`);\r\n      calcularGanancia();\r\n    });\r\n  });\r\n}\r\n",
      "reset.js": "const form = document.getElementById('resetForm');\r\nconst resultado = document.getElementById('resultado');\r\n\r\n// 🧠 Obtener el token de la URL\r\nconst params = new URLSearchParams(window.location.search);\r\nconst token = params.get('token');\r\n\r\nif (!token) {\r\n  resultado.textContent = '❌ Token no proporcionado en el enlace.';\r\n  form.style.display = 'none';\r\n}\r\n\r\nform.addEventListener('submit', async (e) => {\r\n  e.preventDefault();\r\n\r\n  const password = document.getElementById('password').value;\r\n  const confirmPassword = document.getElementById('confirmPassword').value;\r\n\r\n  if (password !== confirmPassword) {\r\n    resultado.textContent = '❌ Las contraseñas no coinciden.';\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const res = await fetch('/api/reset', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ password, token })\r\n    });\r\n\r\n    const data = await res.json();\r\n\r\n    if (data.success) {\r\n      resultado.textContent = '✅ Contraseña actualizada correctamente. Redirigiendo...';\r\n      setTimeout(() => window.location.href = 'login.html', 2000);\r\n    } else {\r\n      resultado.textContent = '❌ ' + (data.error || 'Error al actualizar la contraseña.');\r\n    }\r\n\r\n  } catch (err) {\r\n    console.error(err);\r\n    resultado.textContent = '❌ Error en la conexión con el servidor.';\r\n  }\r\n});\r\n",
      "search.js": "import { renderRecipe, asignarEventosCalculo } from './render.js';\r\nimport { calcularGanancia } from './calculo.js';\r\n\r\nconst form = document.getElementById('searchForm');\r\nconst recipeSummary = document.getElementById('recipeSummary');\r\nconst calculationDetails = document.getElementById('calculationDetails');\r\nconst ingredientesList = document.getElementById('ingredientes');\r\nconst ingredientesTotalesList = document.getElementById('ingredientesTotales');\r\n\r\n// Agregamos un evento para manejar el envío del formulario\r\nform.addEventListener(\"submit\", async (e) => {\r\n  e.preventDefault();\r\n\r\n  const objectName = document.getElementById(\"objectName\").value.trim();\r\n  console.log(\"[DEBUG] Nombre del objeto enviado:\", objectName);\r\n\r\n  if (!objectName) {\r\n    recipeSummary.innerHTML =\r\n      '<p style=\"color: red;\">Por favor, ingresa el nombre de un objeto.</p>';\r\n    calculationDetails.innerHTML = \"\";\r\n    return;\r\n  }\r\n\r\n  try {\r\n    recipeSummary.innerHTML = \"<p>Buscando...</p>\";\r\n    calculationDetails.innerHTML = \"\";\r\n\r\n    const response = await fetch(\"/api/recipes/search\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ objectName }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error HTTP: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.success && data.data) {\r\n      const item = data.data;\r\n      console.log(\"[DEBUG] Datos recibidos del servidor:\", item);\r\n\r\n      // Renderizar la información en `recipeSummary`\r\n      recipeSummary.innerHTML = `\r\n        <h2 id=\"nombreObjeto\">${item.name || \"Nombre no disponible\"}</h2>\r\n        \r\n        <h3>Precio de Venta:</h3>\r\n        <input type=\"number\" id=\"precioObjeto\" class=\"price-input\" placeholder=\"Ingrese precio\">\r\n\r\n        <h3>Receta:</h3>\r\n        <ul id=\"ingredientes\">${renderRecipe(item.recipe)}</ul>\r\n\r\n        <h3>Gasto: <span id=\"gasto\">0</span> K</h3>\r\n        <h3>Ganancia: <span id=\"ganancia\">0</span> K</h3>\r\n      `;\r\n\r\n      // Renderizar la sección de cálculos en `calculationDetails`\r\n      calculationDetails.innerHTML = `\r\n        <label>Cantidad a fabricar:\r\n          <input type=\"number\" id=\"cantidadFabricar\" value=\"1\" min=\"1\" class=\"price-input\">\r\n        </label>\r\n\r\n        <h3>Ganancia Total: <span id=\"gananciaTotal\">0</span> K</h3>\r\n\r\n        <h3>Ingredientes Totales Necesarios:</h3>\r\n        <ul id=\"ingredientesTotales\"></ul>\r\n      `;\r\n\r\n      // Guardar ingredientes en dataset para cálculos\r\n      document.getElementById(\"ingredientes\").dataset.ingredientes = JSON.stringify(item.recipe);\r\n\r\n      // Asignar eventos dinámicamente para calcular la ganancia al modificar los valores\r\n      asignarEventosCalculo();\r\n\r\n    } else {\r\n      recipeSummary.innerHTML = \"<p>No se encontraron resultados para tu búsqueda.</p>\";\r\n      calculationDetails.innerHTML = \"\";\r\n      console.log(\"[DEBUG] Respuesta sin datos:\", data);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"[ERROR] Error en la búsqueda:\", error);\r\n    recipeSummary.innerHTML =\r\n      '<p style=\"color: red;\">Hubo un error al realizar la búsqueda. Inténtalo de nuevo más tarde.</p>';\r\n    calculationDetails.innerHTML = \"\";\r\n  }\r\n});\r\n\r\nfunction sincronizarConBlog() {\r\n  const nombre = document.getElementById(\"nombreObjeto\")?.textContent;\r\n  const descripcion = \"\"; // Se puede enriquecer más adelante\r\n  const imagen = \"\"; // Podés tomarlo desde item.image si se guarda en el DOM\r\n  const valor = parseInt(document.getElementById(\"precioObjeto\")?.value || \"0\");\r\n  const gasto = parseInt(document.getElementById(\"gasto\")?.textContent || \"0\");\r\n  const ganancia = parseInt(document.getElementById(\"ganancia\")?.textContent || \"0\");\r\n  const listaIngredientes = JSON.parse(document.getElementById(\"ingredientes\")?.dataset.ingredientes || \"[]\");\r\n  const ingredientes = listaIngredientes.map(ing => ing.name);\r\n\r\n  if (!nombre || valor === 0 || isNaN(valor)) {\r\n    console.warn(\"[BLOG] No se sincronizó porque falta el nombre o el valor es inválido\");\r\n    return;\r\n  }\r\n\r\n  fetch(\"/api/posts/updateOrCreate\", {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({\r\n      nombre,\r\n      descripcion,\r\n      imagen,\r\n      valor,\r\n      ingredientes\r\n    })\r\n  })\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      if (data.success) {\r\n        console.log(\"[BLOG] Objeto sincronizado correctamente con el blog:\", data.mensaje);\r\n      } else {\r\n        console.warn(\"[BLOG] Error al sincronizar:\", data.error);\r\n      }\r\n    })\r\n    .catch(err => console.error(\"[BLOG] Error de red al sincronizar:\", err));\r\n}\r\nwindow.sincronizarConBlog = sincronizarConBlog;\r\n",
      "topRecetas.js": "document.addEventListener('DOMContentLoaded', async () => {\r\n    const contenedor = document.getElementById('contenedor-recetas');\r\n  \r\n    try {\r\n      const res = await fetch('data/topRecetas.json');\r\n      const recetas = await res.json();\r\n  \r\n      recetas.forEach(receta => {\r\n        const card = document.createElement('div');\r\n        card.className = 'col-md-4';\r\n  \r\n        card.innerHTML = `\r\n          <div class=\"card mb-4 shadow-sm\">\r\n            <img src=\"${receta.image}\" class=\"card-img-top\" alt=\"${receta.name}\">\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">${receta.name}</h5>\r\n              <p class=\"card-text\">${receta.descripcion}</p>\r\n              <p class=\"text-muted small\">Ingredientes: ${receta.ingredientes.join(', ')}</p>\r\n              <a href=\"${receta.url}\" class=\"btn btn-primary\">Ver receta</a>\r\n            </div>\r\n          </div>\r\n        `;\r\n  \r\n        contenedor.appendChild(card);\r\n      });\r\n    } catch (err) {\r\n      console.error('Error al cargar recetas destacadas:', err);\r\n      contenedor.innerHTML = `<p class=\"text-danger\">No se pudieron cargar las recetas. Intentalo más tarde.</p>`;\r\n    }\r\n  });\r\n  ",
      "verificarSesion.js": "document.addEventListener('DOMContentLoaded', async () => {\r\n  const token = localStorage.getItem('jwtToken');\r\n\r\n  const btnLogin = document.getElementById('btnRedirectLogin');\r\n  const btnRegister = document.getElementById('btnRedirectRegister');\r\n  const btnUltimasRecetas = document.getElementById('btnUltimasRecetas');\r\n  const btnVolversePremium = document.getElementById('btnVolversePremium');\r\n  const btnBeneficios = document.getElementById('btnBeneficios');\r\n  const btnLogout = document.getElementById('btnLogout');\r\n\r\n  if (!token) {\r\n    // Usuario no logueado\r\n    if (btnLogin) btnLogin.hidden = false;\r\n    if (btnRegister) btnRegister.hidden = false;\r\n    if (btnLogout) btnLogout.hidden = true;\r\n    if (btnUltimasRecetas) btnUltimasRecetas.hidden = true;\r\n    if (btnVolversePremium) btnVolversePremium.hidden = true;\r\n    if (btnBeneficios) btnBeneficios.hidden = true;\r\n  } else {\r\n    try {\r\n      const response = await fetch('/api/perfil', {\r\n        headers: { Authorization: 'Bearer ' + token }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!data.user || !data.user.isVerified) {\r\n        // Usuario logueado pero NO verificado\r\n        if (btnLogin) btnLogin.hidden = true;\r\n        if (btnRegister) btnRegister.hidden = true;\r\n        if (btnLogout) btnLogout.hidden = false;\r\n\r\n        if (btnUltimasRecetas) btnUltimasRecetas.hidden = true;\r\n        if (btnVolversePremium) btnVolversePremium.hidden = true;\r\n        if (btnBeneficios) btnBeneficios.hidden = true;\r\n\r\n        mostrarModalVerificacion(); // ✅ Mostrar modal en vez de alert\r\n      } else {\r\n        // Usuario logueado y verificado\r\n        if (btnLogin) btnLogin.hidden = true;\r\n        if (btnRegister) btnRegister.hidden = true;\r\n        if (btnLogout) btnLogout.hidden = false;\r\n\r\n        if (btnUltimasRecetas) btnUltimasRecetas.hidden = false;\r\n        if (btnVolversePremium) btnVolversePremium.hidden = false;\r\n        if (btnBeneficios) btnBeneficios.hidden = false;\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error al verificar sesión:', error);\r\n    }\r\n  }\r\n\r\n  // ✅ Evento para botón de Cerrar Sesión\r\n  if (btnLogout) {\r\n    btnLogout.addEventListener('click', () => {\r\n      console.log('🔴 Cerrando sesión: Borrando token...');\r\n      localStorage.removeItem('jwtToken'); // Borramos el token del navegador\r\n      window.location.href = 'login.html'; // Redirigimos al login\r\n    });\r\n  }\r\n\r\n  // ✅ Evento para botón de Registrarse\r\n  if (btnRegister) {\r\n    btnRegister.addEventListener('click', () => {\r\n      console.log('🔵 Redirigiendo a register.html');\r\n      window.location.href = 'register.html';\r\n    });\r\n  }\r\n\r\n  // ✅ Evento para botón de Iniciar Sesión\r\n  if (btnLogin) {\r\n    btnLogin.addEventListener('click', () => {\r\n      console.log('🔵 Redirigiendo a login.html');\r\n      window.location.href = 'login.html';\r\n    });\r\n  }\r\n});\r\n\r\n// ✅ Función para mostrar el modal de verificación\r\nfunction mostrarModalVerificacion() {\r\n  const verificacionModal = new bootstrap.Modal(document.getElementById('verificacionModal'));\r\n  verificacionModal.show();\r\n\r\n  document.getElementById('btnReenviarVerificacion').addEventListener('click', async function () {\r\n    try {\r\n      const token = localStorage.getItem('jwtToken');\r\n\r\n      if (!token) {\r\n        console.error('❌ No hay token disponible');\r\n        return;\r\n      }\r\n\r\n      const response = await fetch('/api/reenviar-verificacion', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        document.querySelector('.modal-body').innerHTML = `\r\n          <div class=\"alert alert-success\">\r\n            ✅ Correo de verificación enviado correctamente. Por favor, revisá tu bandeja de entrada.\r\n          </div>\r\n        `;\r\n        document.getElementById('btnReenviarVerificacion').style.display = 'none';\r\n      } else {\r\n        document.querySelector('.modal-body').innerHTML += `\r\n          <div class=\"alert alert-danger\">\r\n            ❌ Error: ${data.error || 'No se pudo enviar el correo de verificación'}\r\n          </div>\r\n        `;\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error al reenviar verificación:', error);\r\n      document.querySelector('.modal-body').innerHTML += `\r\n        <div class=\"alert alert-danger\">\r\n          ❌ Error de conexión. Intentá nuevamente más tarde.\r\n        </div>\r\n      `;\r\n    }\r\n  });\r\n}\r\ndocument.getElementById('btnBlog').addEventListener('click', () => {  \r\n  window.location.href = 'blog.html';  \r\n});",
      "videoModal.js": "console.log(\"📦 Iniciando carga del modal desde videoModal.html...\");\r\n\r\nfetch('components/videoModal.html')\r\n  .then(response => {\r\n    console.log(\"✅ Respuesta del fetch:\", response.status);\r\n    return response.text();\r\n  })\r\n  .then(html => {\r\n    console.log(\"📄 HTML del modal recibido. Insertando en el DOM...\");\r\n    document.body.insertAdjacentHTML('beforeend', html);\r\n\r\n    const modalElement = document.getElementById('videoModal');\r\n    if (!modalElement) {\r\n      console.error(\"❌ No se encontró el elemento #videoModal en el DOM.\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"🧱 Modal insertado correctamente. Inicializando Bootstrap.Modal...\");\r\n    const modal = new bootstrap.Modal(modalElement);\r\n\r\n    // 🎥 Mostrar siempre el modal al cargar\r\n    console.log(\"🎥 Mostrando modal...\");\r\n    modal.show();\r\n\r\n    // 🛑 Detener el video cuando se cierra el modal\r\n    modalElement.addEventListener('hidden.bs.modal', () => {\r\n      console.log(\"🛑 Modal cerrado. Deteniendo reproducción del video...\");\r\n\r\n      const iframe = document.getElementById('youtubePlaylist');\r\n      if (iframe) {\r\n        const currentSrc = iframe.src;\r\n        iframe.src = \"\";            // Limpiar src para detener el video\r\n        iframe.src = currentSrc;    // Restaurar src para reiniciar en próxima apertura\r\n      }\r\n    });\r\n  })\r\n  .catch(err => {\r\n    console.error(\"🚨 Error al cargar el modal:\", err);\r\n  });\r\n"
    },
    "login.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n  <title>Login RD</title>\r\n\r\n  <!-- Bootstrap CSS -->\r\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n\r\n  <link rel=\"stylesheet\" href=\"css/style.css\">\r\n  <link rel=\"icon\" href=\"images/favicon.png\" type=\"image/png\">\r\n</head>\r\n<body style=\"background: url('/images/fondooficion.jpg') no-repeat center center fixed; background-size: cover;\">\r\n\r\n  <div class=\"container d-flex align-items-center justify-content-center\" style=\"min-height: 100vh;\">\r\n    <div class=\"p-4 bg-white rounded shadow\" style=\"width: 100%; max-width: 400px;\">\r\n      <h1 class=\"text-center mb-4\">Login</h1>\r\n\r\n      <form id=\"loginForm\">\r\n        <div class=\"mb-3\">\r\n          <input type=\"email\" id=\"email\" class=\"form-control\" placeholder=\"Email\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <input type=\"password\" id=\"password\" class=\"form-control\" placeholder=\"Contraseña\" required>\r\n        </div>\r\n        <div class=\"d-grid gap-2\">\r\n          <button type=\"submit\" class=\"btn btn-warning\">Iniciar Sesión</button>\r\n        </div>\r\n      \r\n        <!-- ✅ Botón para recuperar contraseña -->\r\n        <div class=\"text-center mt-3\">\r\n          <a href=\"recuperar.html\" class=\"btn btn-link text-decoration-none\">¿Olvidaste tu contraseña?</a>\r\n        </div>\r\n      </form>\r\n      \r\n\r\n      <pre id=\"resultado\" class=\"mt-3\"></pre>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Bootstrap Bundle -->\r\n  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n\r\n  <script>\r\n    const form = document.getElementById('loginForm');\r\n    const resultado = document.getElementById('resultado');\r\n\r\n    form.addEventListener('submit', async (e) => {\r\n      e.preventDefault();\r\n      const email = document.getElementById('email').value;\r\n      const password = document.getElementById('password').value;\r\n\r\n      try {\r\n        const response = await fetch('/api/login', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ email, password })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.token) {\r\n          localStorage.setItem('jwtToken', data.token);\r\n\r\n          resultado.textContent = '✅ Login exitoso. Redirigiendo...';\r\n          setTimeout(() => window.location.href = 'index.html', 1000);\r\n        } else {\r\n          resultado.textContent = '❌ Error: ' + data.error;\r\n        }\r\n      } catch (error) {\r\n        resultado.textContent = '❌ Error en la conexión.';\r\n        console.error(error);\r\n      }\r\n    });\r\n  </script>\r\n\r\n</body>\r\n</html>\r\n",
    "perfil.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Mi Perfil - Recetas Dofus</title>\r\n  <link rel=\"stylesheet\" href=\"styles.css\"> <!-- Asegurate que esté bien enlazado -->\r\n</head>\r\n<body>\r\n  <h1>👤 Mi Perfil</h1>\r\n\r\n  <div class=\"container\">\r\n    <div class=\"section\" id=\"infoPerfil\">\r\n      <p>Cargando información del perfil...</p>\r\n    </div>\r\n\r\n    <div class=\"section\">\r\n      <button onclick=\"window.location.href='/index.html'\">Ir a la Página Principal</button>\r\n      <button onclick=\"cerrarSesion()\">Cerrar Sesión</button>\r\n    </div>\r\n  </div>\r\n\r\n  <script>\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!token) {\r\n      window.location.href = \"/login.html\";\r\n    } else {\r\n      fetch('/api/perfil', {\r\n        headers: {\r\n          'Authorization': 'Bearer ' + token\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (!res.ok) throw new Error(\"No autorizado\");\r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        const user = data.user;\r\n        document.getElementById('infoPerfil').innerHTML = `\r\n          <p><strong>Email:</strong> ${user.email}</p>\r\n          <p><strong>Premium:</strong> ${user.isPremium ? 'Sí' : 'No'}</p>\r\n        `;\r\n      })\r\n      .catch(() => {\r\n        localStorage.removeItem('token');\r\n        window.location.href = \"/login.html\";\r\n      });\r\n    }\r\n\r\n    function cerrarSesion() {\r\n      localStorage.removeItem('token');\r\n      window.location.href = \"/index.html\";\r\n    }\r\n  </script>\r\n</body>\r\n</html>\r\n",
    "privacidad.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Política de Privacidad</title>\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <link rel=\"stylesheet\" href=\"css/style.css\">\r\n</head>\r\n<body>\r\n  <h1>Política de Privacidad</h1>\r\n\r\n  <p>En DofusDB Recipe Search valoramos tu privacidad. Esta herramienta:</p>\r\n\r\n  <ul>\r\n    <li>No recolecta información personal identificable.</li>\r\n    <li>Utiliza Google Analytics únicamente con fines estadísticos y de mejora del servicio.</li>\r\n    <li>No comparte datos con terceros con fines publicitarios.</li>\r\n  </ul>\r\n\r\n  <p>Si tenés preguntas o querés más información, podés contactarme en <a href=\"mailto:jf_wolf_887@hotmail.com\">jf_wolf_887@hotmail.com</a>.</p>\r\n\r\n  <p><a href=\"index.html\">← Volver al inicio</a></p>\r\n</body>\r\n</html>\r\n",
    "recuperar.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n  <title>Recuperar Contraseña</title>\r\n\r\n  <!-- Bootstrap CSS -->\r\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n  <link rel=\"stylesheet\" href=\"css/style.css\">\r\n  <link rel=\"icon\" href=\"images/favicon.png\" type=\"image/png\">\r\n</head>\r\n<body style=\"background: url('/images/fondooficion.jpg') no-repeat center center fixed; background-size: cover;\">\r\n\r\n  <div class=\"container d-flex align-items-center justify-content-center\" style=\"min-height: 100vh;\">\r\n    <div class=\"p-4 bg-white rounded shadow\" style=\"width: 100%; max-width: 400px;\">\r\n      <h2 class=\"text-center mb-4\">Recuperar Contraseña</h2>\r\n\r\n      <form id=\"recuperarForm\">\r\n        <div class=\"mb-3\">\r\n          <input type=\"email\" id=\"email\" class=\"form-control\" placeholder=\"Ingresá tu email\" required>\r\n        </div>\r\n        <div class=\"d-grid gap-2\">\r\n          <button type=\"submit\" class=\"btn btn-primary\">Enviar enlace de recuperación</button>\r\n        </div>\r\n      </form>\r\n\r\n      <pre id=\"resultado\" class=\"mt-3\"></pre>\r\n\r\n      <div class=\"text-center mt-2\">\r\n        <a href=\"login.html\" class=\"btn btn-link text-decoration-none\">← Volver al login</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Bootstrap Bundle -->\r\n  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n  <!-- Tu script separado -->\r\n  <script src=\"js/recuperar.js\"></script>\r\n</body>\r\n</html>\r\n",
    "register.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n  <title>Registro RD</title>\r\n  <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n</head>\r\n<body>\r\n  <div style=\"text-align: center; margin-top: 50px;\">\r\n    <h1>Crear Cuenta</h1>\r\n\r\n    <form id=\"registerForm\" style=\"display: inline-block; text-align: left;\">\r\n      <input type=\"email\" id=\"email\" placeholder=\"Email\" required style=\"display: block; margin: 10px 0;\"><br>\r\n      <input type=\"password\" id=\"password\" placeholder=\"Contraseña\" required style=\"display: block; margin: 10px 0;\"><br>\r\n      <button type=\"submit\" id=\"btnRegister\">Registrarse</button>\r\n    </form>\r\n\r\n    <pre id=\"resultado\" style=\"margin-top: 20px;\"></pre>\r\n  </div>\r\n\r\n  <!-- Script externo -->\r\n  <script type=\"module\" src=\"js/register.js\"></script>\r\n\r\n</body>\r\n</html>\r\n",
    "reset.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n  <title>Restablecer Contraseña</title>\r\n\r\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n  <link rel=\"stylesheet\" href=\"css/style.css\">\r\n  <link rel=\"icon\" href=\"images/favicon.png\" type=\"image/png\">\r\n</head>\r\n<body style=\"background: url('/images/fondooficion.jpg') no-repeat center center fixed; background-size: cover;\">\r\n\r\n  <div class=\"container d-flex align-items-center justify-content-center\" style=\"min-height: 100vh;\">\r\n    <div class=\"p-4 bg-white rounded shadow\" style=\"width: 100%; max-width: 400px;\">\r\n      <h2 class=\"text-center mb-4\">Restablecer Contraseña</h2>\r\n\r\n      <form id=\"resetForm\">\r\n        <div class=\"mb-3\">\r\n          <input type=\"password\" id=\"password\" class=\"form-control\" placeholder=\"Nueva contraseña\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <input type=\"password\" id=\"confirmPassword\" class=\"form-control\" placeholder=\"Confirmar contraseña\" required>\r\n        </div>\r\n        <div class=\"d-grid gap-2\">\r\n          <button type=\"submit\" class=\"btn btn-success\">Restablecer</button>\r\n        </div>\r\n      </form>\r\n\r\n      <pre id=\"resultado\" class=\"mt-3 text-danger\"></pre>\r\n      <div class=\"text-center mt-2\">\r\n        <a href=\"login.html\" class=\"btn btn-link text-decoration-none\">← Volver al login</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n  <script src=\"js/reset.js\"></script>\r\n</body>\r\n</html>\r\n",
    "terminos.html": "<!DOCTYPE html>\r\n\r\n<html lang=\"es\">\r\n\r\n<head>\r\n\r\n  <meta charset=\"UTF-8\">\r\n\r\n  <title>Términos y Condiciones</title>\r\n\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\r\n  <link rel=\"stylesheet\" href=\"css/style.css\">\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n  <h1>Términos y Condiciones</h1>\r\n\r\n\r\n\r\n  <p>Al utilizar el sitio <strong>DofusDB Recipe Search</strong>, aceptás los siguientes términos y condiciones:</p>\r\n\r\n\r\n\r\n  <h2>1. Propósito del sitio</h2>\r\n\r\n  <p>Este sitio fue creado con fines informativos y educativos. Permite calcular costos y ganancias aproximadas de recetas dentro del juego <strong>Dofus</strong>.</p>\r\n\r\n\r\n\r\n  <h2>2. No afiliación</h2>\r\n\r\n  <p>DofusDB Recipe Search no está afiliado de ninguna manera con <strong>ANKAMA</strong>, sus marcas o sus productos. Dofus es una marca registrada de Ankama Games.</p>\r\n\r\n\r\n\r\n  <h2>3. Uso de datos</h2>\r\n\r\n  <p>Los datos utilizados provienen de fuentes públicas o APIs de terceros. No se garantiza que estén siempre actualizados o completos.</p>\r\n\r\n\r\n\r\n  <h2>4. Limitación de responsabilidad</h2>\r\n\r\n  <p>El uso del sitio es bajo tu propia responsabilidad. No se garantiza la exactitud de los resultados ni se asume responsabilidad por pérdidas dentro del juego.</p>\r\n\r\n\r\n\r\n  <h2>5. Cambios</h2>\r\n\r\n  <p>Los Términos y Condiciones pueden cambiar sin previo aviso. Se recomienda revisarlos periódicamente.</p>\r\n\r\n\r\n\r\n  <h2>6. Contacto</h2>\r\n\r\n  <p>Si tenés preguntas o sugerencias, podés escribirme a <a href=\"mailto:jf_wolf_887@hotmail.com\">jf_wolf_887@hotmail.com</a>.</p>\r\n\r\n\r\n\r\n  <p><a href=\"index.html\">← Volver al inicio</a></p>\r\n\r\n</body>\r\n\r\n</html>",
    "topRecetas.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n  <title>Top Recetas de Dofus</title>\r\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n  <link rel=\"stylesheet\" href=\"css/style.css\">\r\n  <link rel=\"icon\" href=\"images/favicon.png\" type=\"image/png\">\r\n</head>\r\n<body>\r\n  <header class=\"container mt-4\">\r\n    <h1 class=\"text-center\">🌟 Top Recetas de Dofus</h1>\r\n    <p class=\"text-center\">Explorá nuestras recetas destacadas con análisis de ingredientes y estrategias para maximizar tus kamas.</p>\r\n  </header>\r\n\r\n  <main class=\"container my-5\">\r\n    <div class=\"row\" id=\"contenedor-recetas\">\r\n      <!-- Aquí se insertarán dinámicamente las tarjetas de recetas -->\r\n    </div>\r\n  </main>\r\n\r\n  <footer class=\"text-center mt-5 mb-3\">\r\n    <a href=\"index.html\" class=\"btn btn-outline-primary\">← Volver al Inicio</a>\r\n    <p class=\"mt-3\">© 2025 Jorge Fernández Rojo Andrés</p>\r\n  </footer>\r\n\r\n  <script src=\"js/topRecetas.js\" type=\"module\"></script>\r\n</body>\r\n</html>\r\n",
    "verificacionExitosa.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Cuenta Verificada</title>\r\n  <style>\r\n    body {\r\n      text-align: center;\r\n      font-family: sans-serif;\r\n      background: #f0f0f0;\r\n      padding: 50px;\r\n    }\r\n    img {\r\n      width: 300px;\r\n      margin-top: 30px;\r\n    }\r\n    h1 {\r\n      color: #28a745;\r\n    }\r\n    .botones {\r\n      margin-top: 40px;\r\n    }\r\n    .botones a {\r\n      display: inline-block;\r\n      margin: 10px;\r\n      padding: 12px 24px;\r\n      font-size: 16px;\r\n      text-decoration: none;\r\n      color: white;\r\n      background-color: #007bff;\r\n      border-radius: 5px;\r\n      transition: background-color 0.3s;\r\n    }\r\n    .botones a:hover {\r\n      background-color: #0056b3;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <h1>✅ ¡Cuenta verificada con éxito!</h1>\r\n  <p>Gracias por unirte a Recetas Dofus. Ya podés iniciar sesión.</p>\r\n  <img src=\"https://img1.reactor.cc/pics/post/Wakfu-dofus-Joris-Wakfu-Gif-2774181.gif\" alt=\"Verificación Exitosa\">\r\n\r\n  <div class=\"botones\">\r\n    <a href=\"/perfil.html\">Ir al Perfil</a>\r\n    <a href=\"/index.html\">Ir a la Página Principal</a>\r\n  </div>\r\n</body>\r\n</html>\r\n",
    "verificar.html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Verificar cuenta</title>\r\n  <style>\r\n    body {\r\n      font-family: sans-serif;\r\n      text-align: center;\r\n      padding: 40px;\r\n    }\r\n    input {\r\n      margin: 10px;\r\n      padding: 10px;\r\n      width: 250px;\r\n    }\r\n    button {\r\n      padding: 10px 20px;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <h1>Verificar cuenta</h1>\r\n  <form id=\"formVerificar\">\r\n    <input type=\"email\" id=\"email\" placeholder=\"Tu correo\" required><br>\r\n    <input type=\"text\" id=\"codigo\" placeholder=\"Código recibido\" required><br>\r\n    <button type=\"submit\">Verificar</button>\r\n  </form>\r\n\r\n  <p id=\"mensaje\"></p>\r\n\r\n  <script>\r\n    document.getElementById('formVerificar').addEventListener('submit', async (e) => {\r\n      e.preventDefault();\r\n      const email = document.getElementById('email').value;\r\n      const codigo = document.getElementById('codigo').value;\r\n\r\n      try {\r\n        const res = await fetch('/api/verify-code', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ email, codigo })\r\n        });\r\n        const data = await res.json();\r\n        document.getElementById('mensaje').textContent = data.message || '✅ Verificado correctamente';\r\n      } catch (err) {\r\n        document.getElementById('mensaje').textContent = '❌ Error al verificar.';\r\n        console.error(err);\r\n      }\r\n    });\r\n  </script>\r\n</body>\r\n</html>\r\n"
  },
  "server.js": "const express = require('express');\r\nconst path = require('path');\r\nconst axios = require('axios');\r\nconst { obtenerIngredientes } = require('./src/utils/scraper');\r\nconst authRoutes = require('./src/routes/authRoutes'); \r\nconst mongoose = require('mongoose');\r\nconst verificarToken = require('./src/middlewares/authMiddleware');\r\nconst blogRoutes = require('./src/routes/blogRoutes');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\nconst DOFUSDB_API_URL = process.env.DOFUSDB_API_URL || \"https://api.dofusdb.fr/items\";\r\n\r\n// ✅ Middleware para archivos estáticos (html, css, js, imágenes, etc)\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// ✅ Middleware para interpretar JSON\r\napp.use(express.json());\r\n\r\n// ✅ Tus rutas de autenticación\r\napp.use('/api', blogRoutes);\r\napp.use('/api', authRoutes);\r\n\r\n// ✅ Conexión a MongoDB Atlas\r\nmongoose.connect(process.env.MONGO_URI)\r\n  .then(() => console.log('✅ Conectado correctamente a MongoDB Atlas'))\r\n  .catch(err => console.error('❌ Error al conectar a MongoDB Atlas:', err));\r\n\r\n// ✅ Ruta de búsqueda de recetas\r\napp.post('/api/recipes/search', async (req, res) => {\r\n  const { objectName } = req.body;\r\n\r\n  if (!objectName || !/^[a-zA-Z0-9\\s]+$/.test(objectName)) {\r\n    return res.status(400).json({ success: false, error: 'El nombre del objeto es inválido o está vacío.' });\r\n  }\r\n\r\n  try {\r\n    const formattedName = objectName.split(' ').join('+');\r\n    const url = `${DOFUSDB_API_URL}?slug.es[$search]=${formattedName}&level[$gte]=0&level[$lte]=200&lang=es`;\r\n\r\n    console.log(`[DEBUG] URL construida: ${url}`);\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        accept: \"application/json, text/plain, */*\",\r\n        \"accept-language\": \"es-ES,es;q=0.9\",\r\n        Referer: \"https://dofusdb.fr/\",\r\n      },\r\n    });\r\n\r\n    if (response.data.data.length === 0) {\r\n      console.log(`[INFO] No se encontraron resultados para: ${objectName}`);\r\n      return res.json({ success: true, data: null });\r\n    }\r\n\r\n    const item = response.data.data[0];\r\n    const recipeDetails = await obtenerIngredientes(item.id);\r\n\r\n    const formattedData = {\r\n      name: item.name?.es || 'Nombre no disponible',\r\n      recipe: recipeDetails\r\n    };\r\n\r\n    res.json({ success: true, data: formattedData });\r\n  } catch (error) {\r\n    console.error('[ERROR] Error al buscar la receta:', error.message);\r\n    res.status(500).json({ success: false, error: 'Error al buscar la receta.' });\r\n  }\r\n});\r\n\r\n// ✅ Ruta protegida para obtener el perfil\r\napp.get('/api/perfil', verificarToken, (req, res) => {\r\n  res.json({\r\n    message: 'Perfil accedido correctamente',\r\n    usuario: req.user\r\n  });\r\n});\r\n\r\n// ✅ Si no encuentra ruta, sirve automáticamente el HTML correspondiente o error\r\n// (Esto lo hace automáticamente express.static)\r\n\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`🚀 Servidor corriendo en http://localhost:${PORT}`);\r\n});\r\n// console.log('🔴 Cerrando sesión: Borrando token...');  \r\n",
  "src": {
    "middlewares": {
      "authMiddleware.js": "const { verifyToken } = require('../utils/jwt');\r\n\r\n// ✅ Middleware para proteger rutas y verificar el token\r\nfunction verificarToken(req, res, next) {\r\n  const authHeader = req.headers['authorization'];\r\n\r\n  if (!authHeader) {\r\n    console.warn('⚠️ Token no proporcionado en el header Authorization');\r\n    return res.status(401).json({ error: 'Token no proporcionado' });\r\n  }\r\n\r\n  const token = authHeader.replace('Bearer ', '').trim();\r\n\r\n  if (!token) {\r\n    console.warn('⚠️ Token vacío o mal formado después de limpiar Bearer');\r\n    return res.status(401).json({ error: 'Token inválido o vacío' });\r\n  }\r\n\r\n  try {\r\n    const decoded = verifyToken(token);\r\n    if (!decoded) {\r\n      console.warn('⚠️ Token decodificado vacío');\r\n      return res.status(401).json({ error: 'Token inválido' });\r\n    }\r\n\r\n    req.user = decoded; // Guardamos los datos del usuario en el request\r\n    next(); // Continuamos con la siguiente función\r\n  } catch (error) {\r\n    console.error('❌ Error al verificar token:', error.message);\r\n    return res.status(401).json({ error: 'Token inválido o expirado' });\r\n  }\r\n}\r\n\r\nmodule.exports = verificarToken;\r\n"
    },
    "models": {
      "BlogPost.js": "// src/models/BlogPost.js  \r\nconst mongoose = require('mongoose');  \r\n  \r\nconst commentSchema = new mongoose.Schema({  \r\n  usuario: {  \r\n    type: mongoose.Schema.Types.ObjectId,  \r\n    ref: 'User',  \r\n    required: true  \r\n  },  \r\n  texto: {  \r\n    type: String,  \r\n    required: true  \r\n  },  \r\n  fecha: {  \r\n    type: Date,  \r\n    default: Date.now  \r\n  }  \r\n});  \r\n  \r\nconst blogPostSchema = new mongoose.Schema({  \r\n  nombre: {  \r\n    type: String,  \r\n    required: true  \r\n  },  \r\n  descripcion: String,  \r\n  imagen: String,  \r\n  valor: {  \r\n    type: Number,  \r\n    default: 0  \r\n  },  \r\n  ingredientes: [String],  \r\n  likes: {  \r\n    type: Number,  \r\n    default: 0  \r\n  },  \r\n  usuariosLike: [{  \r\n    type: mongoose.Schema.Types.ObjectId,  \r\n    ref: 'User'  \r\n  }],  \r\n  comentarios: [commentSchema],  \r\n  fechaCreacion: {  \r\n    type: Date,  \r\n    default: Date.now  \r\n  },  \r\n  fechaActualizacion: {  \r\n    type: Date,  \r\n    default: Date.now  \r\n  }  \r\n});  \r\n  \r\n// Middleware para actualizar fechaActualizacion automáticamente  \r\nblogPostSchema.pre('save', function(next) {  \r\n  if (this.isModified()) {  \r\n    this.fechaActualizacion = Date.now();  \r\n  }  \r\n  next();  \r\n});  \r\n  \r\nmodule.exports = mongoose.model('BlogPost', blogPostSchema);",
      "Item.js": "const mongoose = require('mongoose');  \r\n  \r\nconst itemSchema = new mongoose.Schema({  \r\n  name: {  \r\n    type: String,  \r\n    required: true,  \r\n    index: true  \r\n  },  \r\n  imageUrl: String,  \r\n  description: String,  \r\n  productionCost: Number,  \r\n  estimatedProfit: Number,  \r\n  likes: {  \r\n    type: Number,  \r\n    default: 0  \r\n  },  \r\n  searches: {  \r\n    type: Number,  \r\n    default: 1  \r\n  },  \r\n  lastUpdated: {  \r\n    type: Date,  \r\n    default: Date.now  \r\n  }  \r\n}, { timestamps: true });  \r\n  \r\nmodule.exports = mongoose.model('Item', itemSchema);",
      "User.js": "const mongoose = require('mongoose');\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n    lowercase: true,\r\n    trim: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  isPremium: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  isVerified: {\r\n    type: Boolean,\r\n    default: false // ✅ verificado por defecto\r\n  }\r\n  ,\r\n  verificationToken: {\r\n    type: String\r\n  },\r\n  verificationExpires: {\r\n    type: Date\r\n  }\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model('User', userSchema);\r\n"
    },
    "routes": {
      "authRoutes.js": "const express = require('express');\r\nconst bcrypt = require('bcryptjs');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\n\r\n\r\nconst User = require('../models/User');\r\nconst router = express.Router();\r\nconst { generateToken, verifyToken } = require('../utils/jwt');\r\nconst verificarToken = require('../middlewares/authMiddleware');\r\nconst enviarCorreo = require('../utils/email'); // Ya usás esto para verificar\r\n\r\n// Registro\r\nrouter.post('/register', async (req, res) => {\r\n  let { email, password } = req.body;\r\n\r\n  // ✅ Normalizamos el email\r\n  email = email.trim().toLowerCase();\r\n\r\n  if (!email || !password) {\r\n    return res.status(400).json({ error: 'Email y contraseña requeridos' });\r\n  }\r\n\r\n  try {\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) return res.status(409).json({ error: 'El usuario ya existe' });\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const newUser = new User({\r\n      email, // ✅ Ya está normalizado\r\n      password: hashedPassword\r\n      // isVerified se omitió para que use el valor default: false\r\n    });\r\n\r\n    await newUser.save();\r\n\r\n    // 🔐 Generar token de verificación (válido por 1 día)\r\n    const verificationToken = generateToken(\r\n      { id: newUser._id, email: newUser.email },\r\n      '1d'\r\n    );\r\n\r\n    // 🌐 Enlace de verificación\r\n    const verificationUrl = `${process.env.BASE_URL}/api/verify?token=${verificationToken}`;\r\n\r\n    await enviarCorreo(\r\n      newUser.email,\r\n      'Verificá tu cuenta',\r\n      `\r\n        <h2>¡Bienvenido a Recetas Dofus!</h2>\r\n        <p>Para activar tu cuenta, hacé clic en el siguiente enlace:</p>\r\n        <a href=\"${verificationUrl}\">Verificar cuenta</a>\r\n        <p>Este enlace expirará en 24 horas.</p>\r\n      `\r\n    );\r\n    console.log('🔑 Token de verificación generado:', verificationToken);    \r\n\r\n    const token = generateToken({\r\n      id: newUser._id,\r\n      email: newUser.email,\r\n      isPremium: newUser.isPremium\r\n    });\r\n\r\n    res.status(201).json({\r\n      message: 'Usuario registrado correctamente. Revisa tu correo para activar tu cuenta.',\r\n      token\r\n    });\r\n\r\n  } catch (err) {\r\n    console.error('❌ Error en el registro:', err.message);\r\n    res.status(500).json({ error: 'Error del servidor' });\r\n  }\r\n});\r\n\r\n\r\n\r\n// Login\r\nrouter.post('/login', async (req, res) => {\r\n  let { email, password } = req.body;\r\n\r\n  // ✅ Normalizamos el email para evitar errores por espacios o mayúsculas\r\n  email = email.trim().toLowerCase();\r\n\r\n  if (!email || !password) {\r\n    return res.status(400).json({ error: 'Email y contraseña requeridos' });\r\n  }\r\n\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(404).json({ error: 'Usuario no encontrado' });\r\n\r\n    const passwordMatch = await bcrypt.compare(password, user.password);\r\n    if (!passwordMatch) return res.status(401).json({ error: 'Contraseña incorrecta' });\r\n\r\n    if (!user.isVerified) {\r\n      return res.status(403).json({ error: 'Cuenta no verificada. Revisá tu correo electrónico.' });\r\n    }\r\n\r\n    const token = generateToken({ id: user._id, email: user.email, isPremium: user.isPremium });\r\n\r\n    res.json({ message: 'Login exitoso', token });\r\n  } catch (err) {\r\n    console.error('❌ Error en login:', err.message);\r\n    res.status(500).json({ error: 'Error del servidor' });\r\n  }\r\n});\r\n\r\n// Recuperación de contraseña: Enviar correo con enlace de restablecimiento\r\nrouter.post('/recuperar', async (req, res) => {\r\n  const { email } = req.body;\r\n\r\n  if (!email) {\r\n    return res.status(400).json({ error: 'El email es requerido' });\r\n  }\r\n\r\n  try {\r\n    const user = await User.findOne({ email: email.trim().toLowerCase() });\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ error: 'No se encontró un usuario con ese email' });\r\n    }\r\n\r\n    // Generar token válido por 30 minutos\r\n    const token = generateToken({ id: user._id }, '30m');\r\n\r\n    const url = `https://recetasdofus.com.ar/reset.html?token=${token}`;\r\n    const html = `\r\n      <h2>Recuperación de contraseña</h2>\r\n      <p>Hacé clic en el botón para restablecer tu contraseña:</p>\r\n      <a href=\"${url}\" style=\"background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">Restablecer contraseña</a>\r\n      <p>Este enlace expirará en 30 minutos.</p>\r\n    `;\r\n    console.log('🔑 Token generado para recuperación:', token);\r\n    console.log('🔗 URL enviada:', url);\r\n    await enviarCorreo(email, 'Recuperación de contraseña', html);\r\n\r\n    res.json({ success: true });\r\n  } catch (err) {\r\n    console.error('❌ Error al enviar enlace de recuperación:', err.message);\r\n    res.status(500).json({ error: 'Ocurrió un error al intentar recuperar la contraseña' });\r\n  }\r\n});\r\n\r\n// Perfil protegido\r\nrouter.get('/perfil', verificarToken, (req, res) => {\r\n  res.json({\r\n    message: '✅ Acceso autorizado al perfil del usuario',\r\n    user: req.user\r\n  });\r\n});\r\n\r\n// Verificación de cuenta por token\r\n\r\n\r\n\r\nrouter.get('/verify', async (req, res) => {\r\n  const token = req.query.token;\r\n\r\n  if (!token) {\r\n    console.warn('⚠️ Token faltante en verificación');\r\n    return res.status(400).send('Token faltante');\r\n  }\r\n\r\n  try {\r\n    const { id } = verifyToken(token);\r\n    const user = await User.findById(id);\r\n\r\n    if (!user) {\r\n      console.warn('⚠️ Usuario no encontrado con el token');\r\n      return res.status(404).send('Usuario no encontrado');\r\n    }\r\n\r\n    if (user.isVerified) {\r\n      console.log('ℹ️ Usuario ya verificado');\r\n      return res.status(200).send('Tu cuenta ya fue verificada anteriormente.');\r\n    }\r\n\r\n    user.isVerified = true;\r\n    await user.save();\r\n\r\n    // Verificamos si el archivo existe antes de servirlo\r\n    const htmlPath = path.join(process.cwd(), 'public', 'verificacionExitosa.html');\r\n    if (fs.existsSync(htmlPath)) {\r\n      return res.sendFile(htmlPath);\r\n    } else {\r\n      console.warn('⚠️ Archivo verificacionExitosa.html no encontrado');\r\n      return res.status(200).send('✅ Cuenta verificada. Pero falta la página de confirmación.');\r\n    }\r\n\r\n  } catch (err) {\r\n    console.error('❌ Error verificando usuario:', err.message);\r\n    return res.status(400).send('Enlace inválido o expirado');\r\n  }\r\n});\r\n\r\n// ✅ Ruta para restablecer contraseña\r\nrouter.post('/reset', async (req, res) => {\r\n  const { token, password } = req.body;\r\n\r\n  if (!token || !password) {\r\n    return res.status(400).json({ error: 'Token y contraseña requeridos' });\r\n  }\r\n\r\n  try {\r\n    const decoded = verifyToken(token); // 👉 decodifica y valida el token\r\n    const user = await User.findById(decoded.id);\r\n\r\n    if (!user) return res.status(404).json({ error: 'Usuario no encontrado' });\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    user.password = hashedPassword;\r\n    await user.save();\r\n\r\n    res.json({ success: true });\r\n\r\n  } catch (err) {\r\n    console.error('❌ Error al restablecer la contraseña:', err.message);\r\n    return res.status(400).json({ error: 'Token inválido o expirado' });\r\n  }\r\n});\r\n// Validar token de restablecimiento  \r\nrouter.post('/validate-reset-token', async (req, res) => {  \r\n  const { token } = req.body;  \r\n    \r\n  if (!token) {  \r\n    return res.status(400).json({ valid: false });  \r\n  }  \r\n    \r\n  try {  \r\n    // Verificar que el token sea válido  \r\n    const decoded = verifyToken(token);  \r\n    const user = await User.findById(decoded.id);  \r\n      \r\n    if (!user) {  \r\n      return res.json({ valid: false });  \r\n    }  \r\n      \r\n    res.json({ valid: true });  \r\n  } catch (err) {  \r\n    console.error('❌ Error al validar token de restablecimiento:', err.message);  \r\n    res.json({ valid: false });  \r\n  }  \r\n});\r\n// Ruta para reenviar correo de verificación  \r\nrouter.post('/reenviar-verificacion', verificarToken, async (req, res) => {  \r\n  try {  \r\n    const userId = req.user.id;  \r\n    const user = await User.findById(userId);  \r\n\r\n    if (!user) {  \r\n      return res.status(404).json({ error: 'Usuario no encontrado' });  \r\n    }  \r\n\r\n    if (user.isVerified) {  \r\n      return res.status(400).json({ error: 'La cuenta ya está verificada' });  \r\n    }  \r\n\r\n    const verificationToken = generateToken({ id: user._id }, '24h');  \r\n    const verificationUrl = `https://recetasdofus.com.ar/verificar.html?token=${verificationToken}`;  \r\n\r\n    const html = `  \r\n      <h2>Verificá tu cuenta</h2>  \r\n      <p>Hacé clic en el siguiente enlace para completar tu registro:</p>  \r\n      <a href=\"${verificationUrl}\" style=\"background-color: #28a745; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">Verificar cuenta</a>  \r\n      <p>Este enlace expirará en 24 horas.</p>  \r\n    `;  \r\n\r\n    await enviarCorreo(user.email, 'Verificación de cuenta - Recetas Dofus', html);  \r\n\r\n    return res.json({ message: 'Correo de verificación reenviado correctamente' });  \r\n  } catch (err) {  \r\n    console.error('❌ Error al reenviar verificación:', err.message);  \r\n    return res.status(500).json({ error: 'Error del servidor al reenviar verificación' });  \r\n  }  \r\n});\r\n\r\nmodule.exports = router;\r\n",
      "blogRoutes.js": "// src/routes/blogRoutes.js  \r\nconst express = require('express');  \r\nconst router = express.Router();  \r\nconst BlogPost = require('../models/BlogPost');  \r\nconst verificarToken = require('../middlewares/authMiddleware');  \r\n  \r\n// Obtener todos los posts (con filtros opcionales)  \r\nrouter.get('/posts', async (req, res) => {  \r\n  try {  \r\n    const { ordenarPor, filtroValor } = req.query;  \r\n    let query = {};  \r\n    let sort = {};  \r\n      \r\n    // Aplicar filtro por valor mínimo si se especifica  \r\n    if (filtroValor) {  \r\n      query.valor = { $gte: parseInt(filtroValor) };  \r\n    }  \r\n      \r\n    // Aplicar ordenamiento  \r\n    if (ordenarPor === 'valor') {  \r\n      sort.valor = -1; // Descendente por valor  \r\n    } else if (ordenarPor === 'reciente') {  \r\n      sort.fechaActualizacion = -1; // Descendente por fecha de actualización  \r\n    } else {  \r\n      sort.fechaCreacion = -1; // Por defecto, los más nuevos primero  \r\n    }  \r\n      \r\n    const posts = await BlogPost.find(query)  \r\n      .sort(sort)  \r\n      .populate('usuariosLike', 'username')  \r\n      .populate('comentarios.usuario', 'username');  \r\n        \r\n    res.json({ success: true, data: posts });  \r\n  } catch (error) {  \r\n    console.error('Error al obtener posts:', error);  \r\n    res.status(500).json({ success: false, error: 'Error al obtener los posts' });  \r\n  }  \r\n});  \r\n  \r\n// Crear nuevo post (requiere autenticación)  \r\nrouter.post('/posts', verificarToken, async (req, res) => {  \r\n  try {  \r\n    const { nombre, descripcion, imagen, valor, ingredientes } = req.body;  \r\n      \r\n    const newPost = new BlogPost({  \r\n      nombre,  \r\n      descripcion,  \r\n      imagen,  \r\n      valor,  \r\n      ingredientes  \r\n    });  \r\n      \r\n    await newPost.save();  \r\n    res.status(201).json({ success: true, data: newPost });  \r\n  } catch (error) {  \r\n    console.error('Error al crear post:', error);  \r\n    res.status(500).json({ success: false, error: 'Error al crear el post' });  \r\n  }  \r\n});  \r\n  \r\n// Dar like a un post  \r\nrouter.post('/posts/:id/like', verificarToken, async (req, res) => {  \r\n  try {  \r\n    const post = await BlogPost.findById(req.params.id);  \r\n    if (!post) {  \r\n      return res.status(404).json({ success: false, error: 'Post no encontrado' });  \r\n    }  \r\n      \r\n    // Verificar si el usuario ya dio like  \r\n    const userIndex = post.usuariosLike.indexOf(req.user.id);  \r\n      \r\n    if (userIndex === -1) {  \r\n      // Añadir like  \r\n      post.likes += 1;  \r\n      post.usuariosLike.push(req.user.id);  \r\n    } else {  \r\n      // Quitar like  \r\n      post.likes -= 1;  \r\n      post.usuariosLike.splice(userIndex, 1);  \r\n    }  \r\n      \r\n    await post.save();  \r\n    res.json({ success: true, data: post });  \r\n  } catch (error) {  \r\n    console.error('Error al procesar like:', error);  \r\n    res.status(500).json({ success: false, error: 'Error al procesar el like' });  \r\n  }  \r\n});  \r\n  \r\n// Añadir comentario  \r\nrouter.post('/posts/:id/comentario', verificarToken, async (req, res) => {  \r\n  try {  \r\n    const { texto } = req.body;  \r\n      \r\n    if (!texto) {  \r\n      return res.status(400).json({ success: false, error: 'El comentario no puede estar vacío' });  \r\n    }  \r\n      \r\n    const post = await BlogPost.findById(req.params.id);  \r\n    if (!post) {  \r\n      return res.status(404).json({ success: false, error: 'Post no encontrado' });  \r\n    }  \r\n      \r\n    post.comentarios.push({  \r\n      usuario: req.user.id,  \r\n      texto  \r\n    });  \r\n      \r\n    await post.save();  \r\n      \r\n    // Obtener el post actualizado con los datos de usuario en comentarios  \r\n    const updatedPost = await BlogPost.findById(req.params.id)  \r\n      .populate('comentarios.usuario', 'username');  \r\n        \r\n    res.json({ success: true, data: updatedPost });  \r\n  } catch (error) {  \r\n    console.error('Error al añadir comentario:', error);  \r\n    res.status(500).json({ success: false, error: 'Error al añadir el comentario' });  \r\n  }  \r\n});  \r\n  \r\n// Crear o actualizar automáticamente un post desde el buscador (sin autenticación)\r\nrouter.post('/posts/updateOrCreate', async (req, res) => {\r\n  try {\r\n    console.log('[DEBUG] Petición recibida en updateOrCreate:', req.body);\r\n    const { nombre, descripcion, imagen, valor, ingredientes } = req.body;\r\n\r\n    if (!nombre || !valor) {\r\n      return res.status(400).json({ success: false, error: 'Faltan campos requeridos' });\r\n    }\r\n\r\n    const existente = await BlogPost.findOne({ nombre });\r\n\r\n    if (existente) {\r\n      existente.descripcion = descripcion;\r\n      existente.imagen = imagen;\r\n      existente.valor = valor;\r\n      existente.ingredientes = ingredientes;\r\n      existente.fechaActualizacion = Date.now();\r\n      await existente.save();\r\n\r\n      return res.status(200).json({ success: true, mensaje: 'Objeto actualizado en el blog' });\r\n    } else {\r\n      const nuevoPost = new BlogPost({\r\n        nombre,\r\n        descripcion,\r\n        imagen,\r\n        valor,\r\n        ingredientes\r\n      });\r\n\r\n      await nuevoPost.save();\r\n      return res.status(201).json({ success: true, mensaje: 'Nuevo objeto agregado al blog' });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error en updateOrCreate:', error);\r\n    return res.status(500).json({ success: false, error: 'Error interno del servidor' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;",
      "recipeRoutes.js": "const express = require('express');\r\nconst router = express.Router();\r\nconst axios = require('axios');\r\nconst obtenerIngredientes = require('../utils/scraper'); // ✅ Asegúrate de que está bien importado\r\n\r\nrequire('dotenv').config();\r\n\r\n// Ruta para buscar recetas\r\nrouter.post('/search', async (req, res) => {\r\n  const { objectName } = req.body;\r\n\r\n  if (!objectName) {\r\n    return res.status(400).json({ success: false, error: 'El nombre del objeto es obligatorio.' });\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get(process.env.DOFUSDB_API_URL, {\r\n      params: {\r\n        'slug.es[search]': objectName,\r\n        'level[$gte]': 0,\r\n        'level[$lte]': 200,\r\n        sort: '-id',\r\n        lang: 'es',\r\n      },\r\n    });\r\n\r\n    if (response.data.data.length === 0) {\r\n      return res.json({ success: true, data: null });\r\n    }\r\n\r\n    const item = response.data.data[0];\r\n\r\n    // ✅ Llamar correctamente a la función\r\n    const recipeDetails = await obtenerIngredientes(item.id);\r\n\r\n    const formattedData = {\r\n      name: item.name?.es || 'Nombre no disponible',\r\n      recipe: recipeDetails,\r\n      image: item.img || '/default-image.png',\r\n    };\r\n\r\n    res.json({ success: true, data: formattedData });\r\n  } catch (error) {\r\n    console.error('Error al buscar en la API:', error.message);\r\n    res.status(500).json({ success: false, error: 'Error al buscar la receta.' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
    },
    "utils": {
      "email.js": "const nodemailer = require('nodemailer');\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  auth: {\r\n    user: process.env.GMAIL_USER || 'andy46587@gmail.com',\r\n    pass: process.env.GMAIL_PASS || 'vfkv sqwd varz iwtc'\r\n  }\r\n});\r\n\r\n// ✅ Versión reutilizable: permite enviar cualquier correo con HTML personalizado\r\nasync function enviarCorreo(destinatario, asunto, html) {\r\n  const mailOptions = {\r\n    from: `\"Recetas Dofus\" <${process.env.GMAIL_USER || 'andy46587@gmail.com'}>`,\r\n    to: destinatario,\r\n    subject: asunto,\r\n    html\r\n  };\r\n\r\n  try {\r\n    const info = await transporter.sendMail(mailOptions);\r\n    console.log(`✅ Correo enviado a ${destinatario}: ${info.response}`);\r\n  } catch (error) {\r\n    console.error('❌ Error al enviar correo:', error);\r\n  }\r\n}\r\n\r\n// 🟢 (Opcional) Función específica para verificación, que usa la genérica\r\nasync function enviarCorreoVerificacion(destinatario, token) {\r\n  const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';\r\n  const urlVerificacion = `${BASE_URL}/api/verify?token=${token}`;\r\n\r\n  const html = `\r\n    <h2>¡Bienvenido a Recetas Dofus!</h2>\r\n    <p>Hacé clic en el siguiente botón para verificar tu cuenta:</p>\r\n    <a href=\"${urlVerificacion}\" style=\"background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">Verificar Cuenta</a>\r\n    <p>Este enlace expirará en 1 hora.</p>\r\n  `;\r\n\r\n  await enviarCorreo(destinatario, 'Verificá tu cuenta en Recetas Dofus', html);\r\n}\r\n\r\n// ✅ Exporta la función genérica como principal\r\nmodule.exports = enviarCorreo;\r\n",
      "generarTopRecetas.js": "",
      "jwt.js": "const jwt = require('jsonwebtoken');\r\n\r\nconst SECRET_KEY = process.env.JWT_SECRET || 'claveSecretaUltraSegura';\r\n\r\n// ✅ Permitir duración personalizada (por defecto 1h)\r\nfunction generateToken(payload, expiresIn = '1h') {\r\n  return jwt.sign(payload, SECRET_KEY, { expiresIn });\r\n}\r\n\r\nfunction verifyToken(token) {\r\n  return jwt.verify(token, SECRET_KEY);\r\n}\r\n\r\nmodule.exports = { generateToken, verifyToken };\r\n",
      "scraper.js": "const axios = require('axios');\r\nrequire('dotenv').config(); \r\n\r\nconsole.log('[DEBUG] scraper.js ha sido cargado correctamente');\r\n\r\nasync function obtenerIngredientes(itemId) {\r\n    try {\r\n        // Construir la URL de la API con el ID del objeto\r\n        const apiUrl = `https://api.dofusdb.fr/recipes?resultId=${itemId}&lang=fr`;\r\n        console.debug(`[DEBUG] Solicitando datos desde: ${apiUrl}`);\r\n\r\n        // Hacer la solicitud HTTP\r\n        const response = await axios.get(apiUrl);\r\n        const data = response.data.data[0]; // Extraer el primer resultado de la API\r\n\r\n        if (!data) {\r\n            console.error(`[ERROR] No se encontraron datos para el objeto con ID: ${itemId}`);\r\n            return [];\r\n        }\r\n\r\n        // Extraer los ingredientes y sus cantidades\r\n        const ingredients = data.ingredients.map((ingredient, index) => ({\r\n            id: ingredient.id,\r\n            name: ingredient.name.es, // Nombre en español\r\n            image: ingredient.img || '/default-image.png', // Imagen del ingrediente\r\n            quantity: data.quantities[index] || 1 // Cantidad correspondiente\r\n        }));\r\n\r\n        console.debug('[DEBUG] Ingredientes extraídos correctamente:', ingredients);\r\n        return ingredients;\r\n    } catch (error) {\r\n        console.error(`[ERROR] Error al obtener ingredientes:`, error.message);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Exportar la función para ser utilizada en otros archivos\r\nmodule.exports = { obtenerIngredientes };\r\n"
    }
  }
}